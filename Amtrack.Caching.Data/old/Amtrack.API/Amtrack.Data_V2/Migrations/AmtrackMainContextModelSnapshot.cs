// <auto-generated />
using System;
using Amtrack.Data_V2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Amtrack.Data_V2.Migrations
{
    [DbContext(typeof(AmtrackMainContext))]
    partial class AmtrackMainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ContactName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("FkAccountId")
                        .HasColumnName("FK_AccountId");

                    b.Property<int>("FkAddressId")
                        .HasColumnName("FK_AddressId");

                    b.Property<int>("Flags");

                    b.HasKey("Id");

                    b.HasIndex("FkAddressId");

                    b.HasIndex("FkAccountId", "FkAddressId")
                        .IsUnique()
                        .HasName("IX_AccountAddress");

                    b.ToTable("AccountAddress");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BoolValue");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkAccountId")
                        .HasColumnName("FK_AccountId");

                    b.Property<int>("FkAttributeTemplateId")
                        .HasColumnName("FK_AttributeTemplateId");

                    b.Property<int>("Flags");

                    b.Property<double?>("FloatValue");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<long?>("NumericValue");

                    b.Property<string>("StringValue")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("TextValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FkAccountId");

                    b.HasIndex("FkAttributeTemplateId");

                    b.ToTable("AccountAttributes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountAttributeTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("AccountAttributeTemplates");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountBalances", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BatchedBalance");

                    b.Property<double>("CreditLimit");

                    b.Property<double?>("EnhancedCreditLimit");

                    b.Property<DateTime?>("EnhancedExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("Flags");

                    b.Property<double>("TotalBalance");

                    b.Property<double>("UnBatchedBalance");

                    b.HasKey("Id");

                    b.ToTable("AccountBalances");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountContactAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ContactName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("FkAccountContactId")
                        .HasColumnName("FK_AccountContactId");

                    b.Property<int>("FkAddressId")
                        .HasColumnName("FK_AddressId");

                    b.Property<int>("Flags");

                    b.HasKey("Id");

                    b.HasIndex("FkAccountContactId");

                    b.HasIndex("FkAddressId");

                    b.ToTable("AccountContactAddress");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountContactContactNumbers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkAccountContactId")
                        .HasColumnName("FK_AccountContactId");

                    b.Property<int>("FkContactNumberId")
                        .HasColumnName("FK_ContactNumberId");

                    b.Property<int>("Flags");

                    b.HasKey("Id");

                    b.HasIndex("FkAccountContactId");

                    b.HasIndex("FkContactNumberId");

                    b.ToTable("AccountContactContactNumbers");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountContactNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkAccountContactId")
                        .HasColumnName("FK_AccountContactId");

                    b.Property<int>("FkNotificationId")
                        .HasColumnName("FK_NotificationId");

                    b.Property<int>("Flags");

                    b.HasKey("Id");

                    b.HasIndex("FkAccountContactId");

                    b.HasIndex("FkNotificationId");

                    b.ToTable("AccountContactNotifications");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountContactNumbers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkAccountId")
                        .HasColumnName("FK_AccountId");

                    b.Property<int>("FkContactNumberId")
                        .HasColumnName("FK_ContactNumberId");

                    b.Property<int>("Flags");

                    b.HasKey("Id");

                    b.HasIndex("FkAccountId");

                    b.HasIndex("FkContactNumberId");

                    b.ToTable("AccountContactNumbers");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountContacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("FkAccountId")
                        .HasColumnName("FK_AccountId");

                    b.Property<int>("Flags");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkAccountId");

                    b.ToTable("AccountContacts");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountCreditLimitSettings", b =>
                {
                    b.Property<int>("FkAccountId")
                        .HasColumnName("FK_AccountId");

                    b.Property<int>("FkCreditLimitSettingsId")
                        .HasColumnName("FK_CreditLimitSettingsId");

                    b.HasKey("FkAccountId");

                    b.HasIndex("FkCreditLimitSettingsId");

                    b.ToTable("AccountCreditLimitSettings");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Accounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("FkAccountBalanceId")
                        .HasColumnName("FK_AccountBalanceId");

                    b.Property<Guid?>("FkAccountManagerId")
                        .HasColumnName("FK_AccountManagerId");

                    b.Property<int?>("FkMasterAccountId")
                        .HasColumnName("FK_MasterAccountId");

                    b.Property<int>("FkPricelistId")
                        .HasColumnName("FK_PricelistId");

                    b.Property<int>("FkTaxRateId")
                        .HasColumnName("FK_TaxRateId");

                    b.Property<int>("Flags");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<short>("PaymentType");

                    b.Property<string>("WebAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("XfxHostId")
                        .HasColumnName("XFX_HostId");

                    b.HasKey("Id");

                    b.HasIndex("FkAccountBalanceId");

                    b.HasIndex("FkAccountManagerId");

                    b.HasIndex("FkMasterAccountId");

                    b.HasIndex("FkTaxRateId");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasName("IX_Accounts");

                    b.HasIndex("CompanyCode", "XfxHostId")
                        .HasName("ix_Accounts_CompanyCode_XFX_HostId");

                    b.HasIndex("Number", "FkMasterAccountId")
                        .HasName("ix_Accounts_FK_MasterAccountId_includes");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountSystemNotificationTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("AccountSystemNotificationTypes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AdAddressValidationInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Use")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("AD_AddressValidationInfo");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Addresses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("Flags");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("OfficePark")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Province")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("StreetLine1")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("StreetLine2")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<short>("Type");

                    b.Property<string>("UnitNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("XfxHostId")
                        .HasColumnName("XFX_HostId");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AdLinesUpdated", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("LineId");

                    b.Property<int>("QtyAfter");

                    b.Property<int>("QtyBefore");

                    b.HasKey("Id");

                    b.ToTable("adLinesUpdated");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AdPickingSlipPrintStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AdminTimeDelay")
                        .HasColumnType("datetime");

                    b.Property<bool>("Cancelled");

                    b.Property<DateTime?>("DateCancelled")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDelayLifted")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatePrintDelayed")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatePrintQueued")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatePrinted")
                        .HasColumnType("datetime");

                    b.Property<bool>("DelayLifted");

                    b.Property<string>("PickingSlipNumber")
                        .IsRequired()
                        .HasMaxLength(55);

                    b.Property<string>("PrintDelayReasonCode")
                        .HasMaxLength(3);

                    b.Property<bool>("PrintQueued");

                    b.Property<bool>("Printed");

                    b.Property<bool>("PrintingDelayed");

                    b.HasKey("Id");

                    b.ToTable("adPickingSlipPrintStatus");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Alpdatas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountManagerCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<double?>("AdditionalAlp")
                        .HasColumnName("AdditionalALP");

                    b.Property<double?>("BrandingAlp")
                        .HasColumnName("BrandingALP");

                    b.Property<double?>("BrandingTotal");

                    b.Property<double?>("ClothingAlp")
                        .HasColumnName("ClothingALP");

                    b.Property<double?>("ClothingHeadgearAlp")
                        .HasColumnName("ClothingHeadgearALP");

                    b.Property<double?>("ClothingHeadgearTotal");

                    b.Property<double?>("ClothingTotal");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreditNoteNumber")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50);

                    b.Property<short>("DocumentVersion");

                    b.Property<long>("Flags");

                    b.Property<double?>("GiftsAlp")
                        .HasColumnName("GiftsALP");

                    b.Property<double?>("GiftsTotal");

                    b.Property<double?>("GlAlp")
                        .HasColumnName("GlALP");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double?>("OtherAlp")
                        .HasColumnName("OtherALP");

                    b.Property<double?>("OverrideAlp")
                        .HasColumnName("OverrideALP");

                    b.Property<double?>("PromotionAlp")
                        .HasColumnName("PromotionALP");

                    b.Property<double?>("StaticTotal");

                    b.Property<double?>("StaticTotalAlp")
                        .HasColumnName("StaticTotalALP");

                    b.Property<int?>("SubType");

                    b.Property<double?>("TransferAlp")
                        .HasColumnName("TransferALP");

                    b.Property<long>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Created", "AccountManagerCode", "CustomerCode", "GiftsTotal", "ClothingTotal", "ClothingHeadgearTotal", "BrandingTotal", "GiftsAlp", "ClothingAlp", "ClothingHeadgearAlp", "BrandingAlp", "OtherAlp", "AdditionalAlp", "StaticTotalAlp", "Type")
                        .HasName("IX_ALPData_All");

                    b.HasIndex("Created", "DocumentNumber", "GiftsTotal", "ClothingTotal", "ClothingHeadgearTotal", "BrandingTotal", "GiftsAlp", "ClothingAlp", "ClothingHeadgearAlp", "BrandingAlp", "PromotionAlp", "OverrideAlp", "OtherAlp", "GlAlp", "AdditionalAlp", "StaticTotalAlp", "StaticTotal", "Type", "CustomerCode")
                        .HasName("ix_ALPDatas_CustomerCode_includes");

                    b.ToTable("ALPDatas");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlpdocumentAlps", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Flags");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("ALPDocumentALPS");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlpexportData", b =>
                {
                    b.Property<string>("CustomerCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<bool>("Processed");

                    b.HasKey("CustomerCode");

                    b.ToTable("_ALPExportData");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlpexportDataDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("_ALPExportDataDetail");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlpmailerCustomerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("Alpmaintain")
                        .HasColumnName("ALPMaintain");

                    b.Property<double?>("Alpupgrade")
                        .HasColumnName("ALPUpgrade");

                    b.Property<double?>("CarryOver");

                    b.Property<double>("CurrentAlp")
                        .HasColumnName("CurrentALP");

                    b.Property<double>("CurrentSpend");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("FkMailerId")
                        .HasColumnName("FK_MailerId");

                    b.Property<int?>("GenerationStatus");

                    b.HasKey("Id");

                    b.ToTable("ALPMailerCustomerData");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlpmailerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BrandingAlp")
                        .HasColumnName("BrandingALP");

                    b.Property<double>("BrandingSpend");

                    b.Property<double>("ClothingAlp")
                        .HasColumnName("ClothingALP");

                    b.Property<double>("ClothingSpend");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("FkMailerId")
                        .HasColumnName("FK_MailerId");

                    b.Property<double>("GiftsAlp")
                        .HasColumnName("GiftsALP");

                    b.Property<double>("GiftsSpend");

                    b.Property<double>("HeadwearAlp")
                        .HasColumnName("HeadwearALP");

                    b.Property<double>("HeadwearSpend");

                    b.Property<double>("TotalAlp")
                        .HasColumnName("TotalALP");

                    b.Property<double>("TotalSpend");

                    b.Property<short>("Type");

                    b.HasKey("Id");

                    b.ToTable("ALPMailerData");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlpMailerRecipients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("datetime");

                    b.Property<int>("FailedValidation");

                    b.Property<int>("FkMailerId")
                        .HasColumnName("FK_MailerId");

                    b.Property<bool>("IsValid");

                    b.HasKey("Id");

                    b.HasIndex("FkMailerId");

                    b.ToTable("alpMailerRecipients");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlpMailerUpdates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bcc")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("FkAuthor")
                        .HasColumnName("FK_Author");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("alpMailerUpdates");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlpmidYearDatas", b =>
                {
                    b.Property<string>("CustomerCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("Year")
                        .HasColumnName("year");

                    b.Property<double>("AlpBranding")
                        .HasColumnName("alp_branding");

                    b.Property<double>("AlpClothing")
                        .HasColumnName("alp_clothing");

                    b.Property<double>("AlpGifts")
                        .HasColumnName("alp_gifts");

                    b.Property<double>("AlpTotal")
                        .HasColumnName("alp_total");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<double>("SpendBranding")
                        .HasColumnName("spend_branding");

                    b.Property<double>("SpendClothing")
                        .HasColumnName("spend_clothing");

                    b.Property<double>("SpendGifts")
                        .HasColumnName("spend_gifts");

                    b.Property<double>("SpendTotal")
                        .HasColumnName("spend_total");

                    b.HasKey("CustomerCode", "Year");

                    b.ToTable("ALPMidYearDatas");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Alpoverride", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemCodeClear")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<double>("PointsMultiplier");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("ALPOverride");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlppointRuleBonusTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Flags");

                    b.Property<int>("Index");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_ALPPointRuleBonusTypes");

                    b.ToTable("ALPPointRuleBonusTypes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlppointRules", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<double?>("Fixed");

                    b.Property<long?>("FkAlpid")
                        .HasColumnName("FK_ALPId");

                    b.Property<long?>("FkAlppointRuleId")
                        .HasColumnName("FK_ALPPointRuleId");

                    b.Property<int>("Flags");

                    b.Property<int>("Index");

                    b.Property<double?>("Multiplier");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FkAlpid");

                    b.HasIndex("FkAlppointRuleId");

                    b.ToTable("ALPPointRules");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlppointRuleValues", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FkAlppointsMultiplierRuleId")
                        .HasColumnName("FK_ALPPointsMultiplierRuleId");

                    b.Property<int>("Index");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkAlppointsMultiplierRuleId");

                    b.ToTable("ALPPointRuleValues");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlppointsTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkAlpid")
                        .HasColumnName("FK_ALPId");

                    b.Property<int>("Flags");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkAlpid");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasName("IX_ALPPointsMultiplierTypes");

                    b.ToTable("ALPPointsTypes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Alppromotion", b =>
                {
                    b.Property<string>("ItemCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double>("PointsMultiplier");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("date");

                    b.HasKey("ItemCode");

                    b.ToTable("ALPPromotion");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Alps", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CutOffDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Flags");

                    b.Property<int>("Status");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("ALPS");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Alptargets", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("CarryOverNextYearMultiplier");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("DisplayIndex");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long>("FkAlpid")
                        .HasColumnName("FK_ALPId");

                    b.Property<int>("Flags");

                    b.Property<int>("Status");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FkAlpid");

                    b.ToTable("ALPTargets");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlptempData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountManager")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("BeginStatus")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Branding")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("BrandingAlp")
                        .HasColumnName("BrandingALP")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CarryOver")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CarryOverInto")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Cloting")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ClotingAlp")
                        .HasColumnName("ClotingALP")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("EndStatus")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Gifts")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("GiftsAlp")
                        .HasColumnName("GiftsALP")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Headwear")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("HeadwearAlp")
                        .HasColumnName("HeadwearALP")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Number")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PromotionAlp")
                        .HasColumnName("PromotionALP")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ShortFall")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Total")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("TotalAlp")
                        .HasColumnName("TotalALP")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ALPTempData");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Alptypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("PointsMultiplier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ALPTypes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Alpvalues", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Alp")
                        .HasColumnName("ALP");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Flags");

                    b.Property<int?>("InventoryType");

                    b.Property<bool>("IsStatic");

                    b.Property<int>("Month");

                    b.Property<string>("Reference1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Reference2")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Reference3")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<double>("SalesValue");

                    b.Property<int>("SubType");

                    b.Property<int>("Type");

                    b.Property<double>("Units");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("Created", "Year", "Month", "Reference1", "Alp", "SalesValue", "Units", "InventoryType", "SubType", "CustomerCode", "IsStatic", "Type")
                        .HasName("ix_ALPValues_CustomerCode_IsStatic_Type_includes");

                    b.HasIndex("Id", "Created", "Month", "Reference1", "Reference2", "Reference3", "Alp", "SalesValue", "Units", "InventoryType", "Type", "SubType", "Flags", "Year", "CustomerCode", "IsStatic")
                        .HasName("ix_ALPValues_Year_CustomerCode_IsStatic_includes");

                    b.HasIndex("Id", "Created", "Year", "Month", "CustomerCode", "Reference2", "Reference3", "Alp", "SalesValue", "Units", "IsStatic", "InventoryType", "Type", "SubType", "Flags", "Reference1")
                        .HasName("ix_ALPValues_Reference1_includes");

                    b.ToTable("ALPValues");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ApiIntegrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Flags");

                    b.Property<string>("Ips")
                        .HasColumnName("IPs")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Token")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("apiIntegrator");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ApiIntegratorImpersonations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("FkIntegratorId")
                        .HasColumnName("fk_IntegratorId");

                    b.Property<int>("Flags");

                    b.HasKey("Id");

                    b.HasIndex("FkIntegratorId");

                    b.ToTable("apiIntegratorImpersonations");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ApiIntegratorPermissions", b =>
                {
                    b.Property<int>("FkIntegratorId")
                        .HasColumnName("FK_IntegratorId");

                    b.Property<int>("FkPermissionId")
                        .HasColumnName("FK_PermissionId");

                    b.Property<int>("Flags");

                    b.HasKey("FkIntegratorId", "FkPermissionId");

                    b.HasIndex("FkPermissionId");

                    b.ToTable("apiIntegratorPermissions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ApiIntegratorRoles", b =>
                {
                    b.Property<int>("FkIntegratorId")
                        .HasColumnName("FK_IntegratorId");

                    b.Property<int>("FkRoleId")
                        .HasColumnName("FK_RoleId");

                    b.HasKey("FkIntegratorId", "FkRoleId");

                    b.HasIndex("FkRoleId");

                    b.ToTable("apiIntegratorRoles");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ApiLoginTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("CustomerId");

                    b.Property<int>("Flags");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("apiLoginTokens");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ApiPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Flags");

                    b.HasKey("Id");

                    b.ToTable("apiPermissions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ApiRolePermissions", b =>
                {
                    b.Property<int>("FkRoleId")
                        .HasColumnName("FK_RoleId");

                    b.Property<int>("FkPermissionId")
                        .HasColumnName("FK_PermissionId");

                    b.Property<int>("Flags");

                    b.HasKey("FkRoleId", "FkPermissionId");

                    b.HasIndex("FkPermissionId");

                    b.ToTable("apiRolePermissions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ApiRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("apiRoles");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AsmDevice", b =>
                {
                    b.Property<Guid>("DeviceId");

                    b.Property<string>("AssetTag")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("DeviceFunctions");

                    b.Property<Guid>("FkDeviceModelId")
                        .HasColumnName("FK_DeviceModelId");

                    b.Property<Guid>("FkManagerId")
                        .HasColumnName("FK_ManagerID");

                    b.Property<long>("Flags");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("DeviceId");

                    b.HasIndex("FkDeviceModelId");

                    b.HasIndex("FkManagerId");

                    b.ToTable("ASM_Device");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AsmDeviceManufacturer", b =>
                {
                    b.Property<Guid>("ManufacturerId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ManufacturerId");

                    b.ToTable("ASM_DeviceManufacturer");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AsmDeviceModels", b =>
                {
                    b.Property<Guid>("ModelId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FkDeviceManufacturerId")
                        .HasColumnName("FK_DeviceManufacturerId");

                    b.Property<long>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ModelId");

                    b.HasIndex("FkDeviceManufacturerId");

                    b.ToTable("ASM_DeviceModels");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AsmDeviceNotes", b =>
                {
                    b.Property<Guid>("NoteId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FkDeviceId")
                        .HasColumnName("FK_DeviceId");

                    b.Property<int>("FkNoteCreator")
                        .HasColumnName("FK_NoteCreator");

                    b.Property<string>("NoteData")
                        .IsRequired();

                    b.Property<short>("Type");

                    b.HasKey("NoteId");

                    b.HasIndex("FkDeviceId");

                    b.HasIndex("FkNoteCreator");

                    b.ToTable("ASM_DeviceNotes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AsmDeviceOperators", b =>
                {
                    b.Property<Guid>("FkDeviceId")
                        .HasColumnName("FK_DeviceId");

                    b.Property<Guid>("FkOperatorId")
                        .HasColumnName("FK_OperatorId");

                    b.HasKey("FkDeviceId", "FkOperatorId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("FkOperatorId");

                    b.ToTable("ASM_DeviceOperators");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AsmLogBook", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateIn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FkDeviceId")
                        .HasColumnName("FK_DeviceId");

                    b.Property<int?>("FkInReceivedFromId")
                        .HasColumnName("FK_In_ReceivedFromId");

                    b.Property<int?>("FkInReceiverId")
                        .HasColumnName("FK_In_ReceiverId");

                    b.Property<int>("FkOutIssuerId")
                        .HasColumnName("FK_Out_IssuerId");

                    b.Property<int>("FkOutReceivedId")
                        .HasColumnName("FK_Out_ReceivedId");

                    b.Property<long>("Flags");

                    b.Property<bool?>("ReceivedBigo")
                        .HasColumnName("ReceivedBIGO");

                    b.Property<bool?>("ReceivedIgo")
                        .HasColumnName("ReceivedIGO");

                    b.Property<short>("Type");

                    b.HasKey("LogId");

                    b.ToTable("ASM_LogBook");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AudBrandingConversionDatas", b =>
                {
                    b.Property<long>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditAction");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BrandingCode")
                        .HasMaxLength(50);

                    b.Property<short>("BrandingCount");

                    b.Property<double>("BrandingTotal");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("Day");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("DocumentVersion");

                    b.Property<long>("Flags");

                    b.Property<long>("Id");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("ItemCount");

                    b.Property<string>("LinkDocumentNumber")
                        .HasMaxLength(50);

                    b.Property<int>("Month");

                    b.Property<string>("SalesmanCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("SalesmanCodeOverride")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<double>("StockTotal");

                    b.Property<int>("Year");

                    b.HasKey("AuditId");

                    b.ToTable("aud_BrandingConversionDatas");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AuditDocuments", b =>
                {
                    b.Property<int>("AId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("aId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DocumentId");

                    b.Property<long>("Flags");

                    b.Property<long>("Status");

                    b.HasKey("AId");

                    b.ToTable("auditDocuments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Barcodes", b =>
                {
                    b.Property<Guid>("BarcodeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("Used");

                    b.HasKey("BarcodeId");

                    b.ToTable("Barcodes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Baskets", b =>
                {
                    b.Property<int>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BranchCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("FkBasketId")
                        .HasColumnName("FK_BasketId");

                    b.Property<long>("Flags");

                    b.Property<string>("FromBranchCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short>("Status");

                    b.HasKey("BasketId");

                    b.HasIndex("Barcode")
                        .IsUnique()
                        .HasName("UK_BasketBarcode");

                    b.HasIndex("FkBasketId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UK_BasketName");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BasketSessionItems", b =>
                {
                    b.Property<int>("BasketSessionItemsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoxBarcode")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ClosedUserId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatedUserId");

                    b.Property<string>("CreditNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("FkBasketSessionId")
                        .HasColumnName("FK_BasketSessionId");

                    b.Property<long>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("OpenUserId");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Quantity");

                    b.Property<short>("Status");

                    b.HasKey("BasketSessionItemsId");

                    b.HasIndex("FkBasketSessionId");

                    b.HasIndex("BasketSessionItemsId", "ItemCode", "Quantity", "CreatedDate", "OrderNumber", "CreditNumber", "CreatedUserId", "FkBasketSessionId", "Status")
                        .HasName("ix_BasketSessionItems_FK_BasketSessionId_Status_includes");

                    b.ToTable("BasketSessionItems");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BasketSessions", b =>
                {
                    b.Property<int>("BasketSessionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ClosedUserId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CreatedUserId");

                    b.Property<int>("FkBasketId")
                        .HasColumnName("FK_BasketId");

                    b.Property<long>("Flags");

                    b.Property<int>("Level");

                    b.Property<long?>("LocationId");

                    b.Property<string>("LocationName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("OpenUserId");

                    b.Property<short>("Status");

                    b.Property<int>("Version");

                    b.HasKey("BasketSessionId");

                    b.HasIndex("FkBasketId");

                    b.ToTable("BasketSessions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BasketSessionTrackings", b =>
                {
                    b.Property<long>("BasketSessionTrackingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("FkBasketSessionId")
                        .HasColumnName("FK_BasketSessionId");

                    b.Property<int?>("FkBasketSessionItemId")
                        .HasColumnName("FK_BasketSessionItemId");

                    b.Property<int>("Type");

                    b.Property<long?>("UserId");

                    b.HasKey("BasketSessionTrackingId");

                    b.HasIndex("FkBasketSessionId");

                    b.HasIndex("FkBasketSessionItemId");

                    b.ToTable("BasketSessionTrackings");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BlanketAcceptances", b =>
                {
                    b.Property<Guid>("BlanketAcceptanceId");

                    b.Property<string>("AcceptedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<short>("BlanketType");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ContactDesignation")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("BlanketAcceptanceId");

                    b.HasIndex("CustomerCode", "BlanketType")
                        .IsUnique()
                        .HasName("UK_BlanketAcceptances");

                    b.ToTable("BlanketAcceptances");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchAddresses", b =>
                {
                    b.Property<long>("FkBranchId")
                        .HasColumnName("FK_BranchId");

                    b.Property<int>("FkAddressId")
                        .HasColumnName("FK_AddressId");

                    b.HasKey("FkBranchId", "FkAddressId");

                    b.HasIndex("FkAddressId");

                    b.ToTable("BranchAddresses");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchAlps", b =>
                {
                    b.Property<long>("FkBranchId")
                        .HasColumnName("FK_BranchId");

                    b.Property<long>("FkAlpid")
                        .HasColumnName("FK_ALPId");

                    b.HasKey("FkBranchId", "FkAlpid");

                    b.HasIndex("FkAlpid");

                    b.ToTable("BranchALPS");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BoolValue");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkAttributeTemplateId")
                        .HasColumnName("FK_AttributeTemplateId");

                    b.Property<long>("FkBranchId")
                        .HasColumnName("FK_BranchId");

                    b.Property<int>("Flags");

                    b.Property<double?>("FloatValue");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<long?>("NumericValue");

                    b.Property<string>("StringValue")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("TextValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FkAttributeTemplateId");

                    b.HasIndex("FkBranchId");

                    b.ToTable("BranchAttributes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchAttributeTemplateOptionValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("FkTemplateId")
                        .HasColumnName("FK_TemplateId");

                    b.Property<int>("Sequence");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkTemplateId");

                    b.ToTable("branchAttributeTemplateOptionValues");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchAttributeTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("BranchAttributeTemplates");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchContactNumbers", b =>
                {
                    b.Property<long>("FkBranchId")
                        .HasColumnName("FK_BranchId");

                    b.Property<int>("FkContactNumbersId")
                        .HasColumnName("FK_ContactNumbersId");

                    b.HasKey("FkBranchId", "FkContactNumbersId");

                    b.HasIndex("FkContactNumbersId");

                    b.ToTable("BranchContactNumbers");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchDelivery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DeliveryNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DispatchedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DispatchedDateWaitingPoddate")
                        .HasColumnName("DispatchedDateWaitingPODDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Flags");

                    b.Property<DateTime?>("HandOverDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("BranchDelivery");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchDeliveryCourierInfoes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FkBranchDeliveryId")
                        .HasColumnName("FK_BranchDeliveryId");

                    b.Property<string>("ParcelId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ShipmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkBranchDeliveryId");

                    b.ToTable("BranchDeliveryCourierInfoes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchDeliveryParcels", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FkBranchDeliveryId")
                        .HasColumnName("FK_BranchDeliveryId");

                    b.Property<long>("ParcelId");

                    b.HasKey("Id");

                    b.HasIndex("FkBranchDeliveryId");

                    b.HasIndex("ParcelId")
                        .IsUnique()
                        .HasName("IX_BranchDeliveryParcels");

                    b.ToTable("BranchDeliveryParcels");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchDeliveryProcesses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchPrefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateProcessed")
                        .HasColumnType("datetime");

                    b.Property<bool>("Error");

                    b.Property<string>("FromFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("Processed");

                    b.Property<short>("Type");

                    b.Property<string>("VParam1")
                        .HasColumnName("v_param1")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("VParam2")
                        .HasColumnName("v_param2")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("BranchDeliveryProcesses");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchDeliveryProcessTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkBranchDeliveryProcessId")
                        .HasColumnName("FK_BranchDeliveryProcessId");

                    b.Property<string>("TrackDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkBranchDeliveryProcessId");

                    b.ToTable("BranchDeliveryProcessTracking");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchDeliveryRequestResponses", b =>
                {
                    b.Property<Guid>("ResponseId");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<Guid>("BranchDeliveryRequestId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("ResponseId");

                    b.HasIndex("BranchDeliveryRequestId")
                        .HasName("IX_BranchDeliveryRequestResponses_BranchDeliveryRequestId1");

                    b.HasIndex("Branch", "BranchDeliveryRequestId")
                        .HasName("IX_BranchDeliveryRequestResponses_BranchDeliveryRequestId");

                    b.ToTable("BranchDeliveryRequestResponses");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchDeliveryRequests", b =>
                {
                    b.Property<Guid>("BranchDeliveryRequestId");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Flags");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("BranchDeliveryRequestId");

                    b.HasIndex("DocumentNumber");

                    b.HasIndex("ReferenceNumber")
                        .HasName("ix_BranchDeliveryRequests_ReferenceNumber");

                    b.ToTable("BranchDeliveryRequests");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Branches", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchCode")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("FkCurrencyId")
                        .HasColumnName("FK_CurrencyId");

                    b.Property<int>("Flags");

                    b.Property<string>("InFolder")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("OutFolder")
                        .IsRequired()
                        .HasColumnName("outFolder")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RegNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Type");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkCurrencyId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchInvoiceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("FkBranchId")
                        .HasColumnName("FK_BranchId");

                    b.Property<long?>("FkPrimaryBranchId")
                        .HasColumnName("FK_PrimaryBranchId");

                    b.Property<int?>("FkPrimaryBranchWarehouseId")
                        .HasColumnName("FK_PrimaryBranchWarehouseId");

                    b.Property<long?>("FkSecondaryBranchId")
                        .HasColumnName("FK_SecondaryBranchId");

                    b.Property<int?>("FkSecondaryBranchWarehouseId")
                        .HasColumnName("FK_SecondaryBranchWarehouseId");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PastelDangerousGoodsCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PastelInvoiceCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("Priority");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkBranchId");

                    b.HasIndex("FkPrimaryBranchId");

                    b.HasIndex("FkPrimaryBranchWarehouseId");

                    b.HasIndex("FkSecondaryBranchId");

                    b.HasIndex("FkSecondaryBranchWarehouseId");

                    b.ToTable("BranchInvoiceType");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchInvoiceTypeShipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FkBranchInvoiceTypeId")
                        .HasColumnName("FK_BranchInvoiceTypeId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkBranchInvoiceTypeId");

                    b.ToTable("BranchInvoiceTypeShipment");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchRules", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("FkBranchInvoiceTypeId")
                        .HasColumnName("FK_BranchInvoiceTypeId");

                    b.Property<long?>("FkBranchInvoiceTypeShipmentId")
                        .HasColumnName("FK_BranchInvoiceTypeShipmentId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkBranchInvoiceTypeId");

                    b.HasIndex("FkBranchInvoiceTypeShipmentId");

                    b.ToTable("BranchRules");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchRuleValues", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FkBranchRuleId")
                        .HasColumnName("FK_BranchRuleId");

                    b.Property<int>("Index");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkBranchRuleId");

                    b.ToTable("BranchRuleValues");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchServers", b =>
                {
                    b.Property<long>("FkBranchId")
                        .HasColumnName("FK_BranchId");

                    b.Property<int>("FkServerId")
                        .HasColumnName("FK_ServerId");

                    b.HasKey("FkBranchId", "FkServerId");

                    b.HasIndex("FkServerId");

                    b.ToTable("BranchServers");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Courier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CourierAddress")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("CourierPdfpath")
                        .IsRequired()
                        .HasColumnName("CourierPDFPath")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("DaysWaitAtBranch");

                    b.Property<int>("DispatchedTime");

                    b.Property<long>("FkBranchId")
                        .HasColumnName("FK_Branch_Id");

                    b.Property<int>("NumberOfTaxInvoicesToPrintOnHandOver");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkBranchId");

                    b.ToTable("BranchSetting");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("BranchWarehouse");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchWarehouseLink", b =>
                {
                    b.Property<long>("FkBranchId")
                        .HasColumnName("FK_BranchId");

                    b.Property<int>("FkBranchWarehouseId")
                        .HasColumnName("FK_BranchWarehouseId");

                    b.HasKey("FkBranchId", "FkBranchWarehouseId");

                    b.HasIndex("FkBranchWarehouseId");

                    b.ToTable("BranchWarehouseLink");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchWifi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthType");

                    b.Property<int>("FkAuthenticationId")
                        .HasColumnName("FK_AuthenticationId");

                    b.Property<long>("FkBranchId")
                        .HasColumnName("FK_BranchId");

                    b.Property<bool>("Hidden");

                    b.Property<string>("Ssid")
                        .IsRequired()
                        .HasColumnName("SSID")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkBranchId");

                    b.ToTable("BranchWifi");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BrandingConversionAldatas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AudTimestamp")
                        .HasColumnName("audTimestamp")
                        .HasColumnType("datetime");

                    b.Property<string>("BrandingCode")
                        .HasMaxLength(50);

                    b.Property<int>("BrandingQuantity");

                    b.Property<int>("Day");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("DocumentVersion");

                    b.Property<long>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LinkDocumentNumber")
                        .HasMaxLength(50);

                    b.Property<int>("Month");

                    b.Property<short>("NumOfPositions");

                    b.Property<string>("SalesmanCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("SalesmanCodeOverride")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("StockQuantity");

                    b.Property<int>("TotalBrandingUnits");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("DocumentNumber")
                        .HasName("IX_BCALDocumentNumber");

                    b.HasIndex("Day", "Month", "Year", "DocumentNumber", "ItemCode", "LinkDocumentNumber", "Flags", "SalesmanCodeOverride", "BrandingQuantity")
                        .HasName("ix_BrandingConversionALDatas_SalesmanCodeOverride_BrandingQuantity_includes");

                    b.HasIndex("Day", "Month", "Year", "DocumentNumber", "ItemCode", "LinkDocumentNumber", "Flags", "SalesmanCodeOverride", "StockQuantity")
                        .HasName("ix_BrandingConversionALDatas_SalesmanCodeOverride_StockQuantity_includes");

                    b.ToTable("BrandingConversionALDatas");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BrandingConversionDatas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandingCode")
                        .HasMaxLength(50);

                    b.Property<short>("BrandingCount");

                    b.Property<double>("BrandingTotal");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("Day");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("DocumentVersion");

                    b.Property<long>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("ItemCount");

                    b.Property<string>("LinkDocumentNumber")
                        .HasMaxLength(50);

                    b.Property<int>("Month");

                    b.Property<string>("SalesmanCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("SalesmanCodeOverride")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<double>("StockTotal");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("BrandingConversionDatas");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BrandingConversionGroups", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FkOwnerId")
                        .HasColumnName("FK_OwnerId");

                    b.Property<long>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("GroupId");

                    b.HasIndex("FkOwnerId");

                    b.ToTable("BrandingConversionGroups");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BrandingConversionMembers", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkGroupId")
                        .HasColumnName("FK_GroupId");

                    b.Property<Guid>("FkUserId")
                        .HasColumnName("FK_UserId");

                    b.Property<long>("Flags");

                    b.HasKey("MemberId");

                    b.HasIndex("FkGroupId");

                    b.HasIndex("FkUserId");

                    b.ToTable("BrandingConversionMembers");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BrandingInfoLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AccountContactId");

                    b.Property<string>("ContactIds")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DownloadLogoGuid");

                    b.Property<string>("DownloadLogoPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ExactRepeatJobCardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("FkLineId")
                        .HasColumnName("FK_LineId");

                    b.Property<int>("Flags");

                    b.Property<string>("FoilColour")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LayoutNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LogoCreated")
                        .HasColumnType("datetime");

                    b.Property<long?>("LogoId");

                    b.Property<string>("LogoName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("LogoRepeatJobCardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PantoneColour")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<string>("VinylColour")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkLineId");

                    b.ToTable("BrandingInfoLine");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BrandingLineInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandingPosition")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<Guid>("FkLineId")
                        .HasColumnName("FK_LineId");

                    b.Property<int>("Flags");

                    b.Property<int?>("FoilColour");

                    b.Property<string>("LogoName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("LogoPosition")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PrintColours")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<double?>("PrintSizeHeight");

                    b.Property<double?>("PrintSizeWidth");

                    b.Property<int>("ReapeatInfo");

                    b.Property<string>("Repeatreference")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("VinylColour");

                    b.HasKey("Id");

                    b.HasIndex("FkLineId");

                    b.HasIndex("Flags", "FkLineId")
                        .HasName("IX_BrandingLineInfo_LineId_Flags");

                    b.ToTable("BrandingLineInfo");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BrandingLineInfoAttachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkBrandingInfoLineId")
                        .HasColumnName("FK_BrandingInfoLineId");

                    b.Property<int>("Flags");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkBrandingInfoLineId");

                    b.ToTable("BrandingLineInfoAttachments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BrandingLineInfoContacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkAccountContactId")
                        .HasColumnName("FK_AccountContactId");

                    b.Property<int>("FkBrandingInfoLineId")
                        .HasColumnName("FK_BrandingInfoLineId");

                    b.HasKey("Id");

                    b.HasIndex("FkBrandingInfoLineId");

                    b.HasIndex("FkAccountContactId", "FkBrandingInfoLineId")
                        .IsUnique()
                        .HasName("IX_BrandingLineInfoContacts");

                    b.ToTable("BrandingLineInfoContacts");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BudgetedTurnover", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Branding")
                        .HasColumnType("money");

                    b.Property<decimal>("Clothing")
                        .HasColumnType("money");

                    b.Property<decimal>("Gifts")
                        .HasColumnType("money");

                    b.Property<int>("Month");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("BudgetedTurnover");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ClientContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ClientContact");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ClientDelivery", b =>
                {
                    b.Property<int>("FkAccountId")
                        .HasColumnName("FK_AccountId");

                    b.Property<int>("FkClientContactId")
                        .HasColumnName("FK_ClientContactId");

                    b.Property<int>("FkClientDeliveryAddressId")
                        .HasColumnName("FK_ClientDeliveryAddressId");

                    b.HasKey("FkAccountId");

                    b.HasIndex("FkClientContactId")
                        .IsUnique()
                        .HasName("IX_ClientDelivery");

                    b.HasIndex("FkClientDeliveryAddressId");

                    b.ToTable("ClientDelivery");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ClientDeliveryAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("FriendlyName")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("OfficeBuilding")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SuiteNo")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ClientDeliveryAddress");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ClientDocumentRequests", b =>
                {
                    b.Property<Guid>("ClientRequestId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("RequestType");

                    b.Property<short>("Status");

                    b.HasKey("ClientRequestId");

                    b.ToTable("ClientDocumentRequests");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ClientDocumentResponses", b =>
                {
                    b.Property<Guid>("ResponseId");

                    b.Property<Guid>("ClientDocumentRequestClientRequestId")
                        .HasColumnName("ClientDocumentRequest_ClientRequestId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<short>("ResponseValue");

                    b.HasKey("ResponseId");

                    b.HasIndex("ClientDocumentRequestClientRequestId");

                    b.ToTable("ClientDocumentResponses");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.CommercialBrandingDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DestinationBranchCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Flags");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SourceCompanyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("CommercialBrandingDocuments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ContactNumbers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("Flags");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("RegionCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<short>("Type");

                    b.HasKey("Id");

                    b.ToTable("ContactNumbers");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.CreateInsuffiecients", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("FkUserTracking")
                        .IsRequired()
                        .HasColumnName("FK_UserTracking")
                        .HasMaxLength(50);

                    b.Property<short>("FromArea");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("UnitsAvailable");

                    b.Property<int>("UnitsNeeded");

                    b.HasKey("Id");

                    b.ToTable("CreateInsuffiecients");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.CreditLimitSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BlockAccount");

                    b.Property<bool>("Blocked");

                    b.Property<long>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("NearLimitPercentage");

                    b.Property<int>("OverCreditLimitAcceptablePercentage");

                    b.Property<double>("OverCreditLimitAcceptableValue");

                    b.Property<int>("OverCreditLimitPercentageToBlockOrder");

                    b.Property<double>("OverCreditLimitValueToBlockOrder");

                    b.Property<bool>("PutOrderOnHold");

                    b.Property<bool>("SendBlockAccountNotification");

                    b.Property<bool>("SendNearCreditLimitNotification");

                    b.Property<bool>("SendOrderOnHoldNotification");

                    b.HasKey("Id");

                    b.ToTable("CreditLimitSettings");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.CreditNoteLogs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreditNoteId")
                        .HasColumnName("CreditNoteID");

                    b.Property<string>("CreditNoteNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CreditNoteRequestId")
                        .HasColumnName("CreditNoteRequestID")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SalesOrderNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool?>("Success")
                        .HasColumnName("SUCCESS");

                    b.HasKey("Id");

                    b.ToTable("CreditNoteLogs");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.CreditNoteProcesses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreditNoteNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("FkCreditNoteRequestId")
                        .HasColumnName("FK_CreditNoteRequestId");

                    b.Property<int?>("FkDestinationPastelCreditNoteId")
                        .HasColumnName("FK_DestinationPastelCreditNoteId");

                    b.Property<int?>("FkSourcePastelCreditNoteId")
                        .HasColumnName("FK_SourcePastelCreditNoteId");

                    b.Property<bool?>("HasPlaceCreditNoteInAmtrack");

                    b.Property<bool?>("HasPlaceCreditNoteInPastel");

                    b.Property<bool?>("HasProcessCreditNoteInAmtrack");

                    b.Property<bool?>("HasProcessCreditNoteInPastel");

                    b.Property<bool?>("HasProcessDelivery");

                    b.Property<string>("SalesOrderNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool?>("Success");

                    b.HasKey("Id");

                    b.ToTable("CreditNoteProcesses");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.CreditNoteRequestLogs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Approved");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("datetime");

                    b.Property<bool?>("CreditNoteCreated");

                    b.Property<int?>("CreditNoteRequestId")
                        .HasColumnName("CreditNoteRequestID");

                    b.Property<bool?>("Decline");

                    b.Property<bool?>("InventoryCreated");

                    b.Property<bool?>("InvoiceCreated");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool?>("RequestCreated");

                    b.Property<bool?>("Success");

                    b.HasKey("Id");

                    b.ToTable("CreditNoteRequestLogs");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.CreditNoteRequestProcesses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkCreditNoteRequestId")
                        .HasColumnName("FK_CreditNoteRequestId");

                    b.Property<bool?>("IsCreditNoteCreated");

                    b.Property<bool?>("IsCreditRequestApproved");

                    b.Property<bool?>("IsCreditRequestCreated");

                    b.Property<bool?>("IsCreditRequestDeclined");

                    b.Property<bool?>("IsInventoryCreated");

                    b.Property<bool?>("IsInvoiceCreated");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool?>("Success");

                    b.HasKey("Id");

                    b.ToTable("CreditNoteRequestProcesses");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<short>("DecimalDisplayLimit");

                    b.Property<string>("DisplayFormat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("FkAddressId")
                        .HasColumnName("FK_AddressId");

                    b.Property<int>("Flags");

                    b.Property<string>("OfficePark")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Province")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("StreetLine1")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("StreetLine2")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Suburb")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Type");

                    b.Property<string>("UnitNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("DeliveryAddress");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("DeliveryProvider");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryProviderConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiproviderEndPoint")
                        .HasColumnName("APIProviderEndPoint")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("FkDeliveryProviderId")
                        .HasColumnName("FK_DeliveryProviderId");

                    b.HasKey("Id");

                    b.HasIndex("FkDeliveryProviderId");

                    b.ToTable("DeliveryProviderConfig");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryProviderServiceExclusions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkDeliveryProviderId")
                        .HasColumnName("FK_DeliveryProviderId");

                    b.Property<int>("FkItemId")
                        .HasColumnName("FK_ItemId");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkDeliveryProviderId");

                    b.ToTable("DeliveryProviderServiceExclusions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryProviderServiceLeadTimes", b =>
                {
                    b.Property<int>("FkDeliveryProviderId")
                        .HasColumnName("FK_DeliveryProviderId");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Zone")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("LeadTime")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("FkDeliveryProviderId", "ServiceCode", "Zone");

                    b.ToTable("DeliveryProviderServiceLeadTimes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryProviderServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("FkDeliveryProviderId")
                        .HasColumnName("FK_DeliveryProviderId");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkDeliveryProviderId");

                    b.ToTable("DeliveryProviderServices");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryQuote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FkAccountContactId")
                        .HasColumnName("FK_AccountContactId");

                    b.Property<int>("FkDeliveryProviderId")
                        .HasColumnName("FK_DeliveryProviderId");

                    b.Property<int?>("FkDeliveryQuoteAddressId")
                        .HasColumnName("FK_DeliveryQuoteAddressId");

                    b.Property<int?>("FkDeliveryQuoteDetailId")
                        .HasColumnName("FK_DeliveryQuoteDetailId");

                    b.Property<int>("Flags");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Type");

                    b.Property<double>("Volumetric");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("FkDeliveryProviderId");

                    b.HasIndex("FkDeliveryQuoteAddressId");

                    b.ToTable("DeliveryQuote");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryQuoteDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Courier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("EstdeliveryDate")
                        .HasColumnName("ESTDeliveryDate");

                    b.Property<DateTime?>("Etadate")
                        .HasColumnName("ETADate")
                        .HasColumnType("datetime");

                    b.Property<int>("FkDeliveryQuoteId")
                        .HasColumnName("FK_DeliveryQuoteId");

                    b.Property<int>("Flags");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("LeadTime")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<double>("Price");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SeviceCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<TimeSpan>("Time");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkDeliveryQuoteId");

                    b.ToTable("DeliveryQuoteDetail");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryQuoteDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("FkDeliveryQuoteId")
                        .HasColumnName("FK_DeliveryQuoteId");

                    b.HasKey("Id");

                    b.HasIndex("FkDeliveryQuoteId");

                    b.ToTable("DeliveryQuoteDocuments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryQuoteItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkDeliveryQuoteId")
                        .HasColumnName("FK_DeliveryQuoteId");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("FkDeliveryQuoteId");

                    b.ToTable("DeliveryQuoteItems");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliverySuburbLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkProviderId")
                        .HasColumnName("FK_ProviderId");

                    b.Property<int>("Flags");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Province")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Suburb")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Zone")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkProviderId");

                    b.ToTable("DeliverySuburbLookup");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryWaybill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookingEstDeliveryDate");

                    b.Property<double?>("BookingPrice");

                    b.Property<string>("Courier")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DispatchedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Etadate")
                        .HasColumnName("ETADate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FkAccountContactId")
                        .HasColumnName("FK_AccountContactId");

                    b.Property<int>("FkDeliveryProviderId")
                        .HasColumnName("FK_DeliveryProviderId");

                    b.Property<int?>("FkDeliveryWaybillAddressId")
                        .HasColumnName("FK_DeliveryWaybillAddressId");

                    b.Property<Guid?>("FkDocumentId")
                        .HasColumnName("FK_DocumentId");

                    b.Property<int?>("FkHistoryId")
                        .HasColumnName("FK_HistoryId");

                    b.Property<int?>("FkWaybillCourierDetailsId")
                        .HasColumnName("FK_WaybillCourierDetailsId");

                    b.Property<int>("Flags");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ProviderEta")
                        .HasColumnName("ProviderETA")
                        .HasColumnType("datetime");

                    b.Property<string>("ProviderNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("ProviderPrice");

                    b.Property<int?>("QuoteEstDeliveryDate");

                    b.Property<string>("QuoteLeadTime")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("QuoteNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<double>("QuotePrice");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkAccountContactId");

                    b.HasIndex("FkDeliveryProviderId");

                    b.HasIndex("FkDeliveryWaybillAddressId");

                    b.HasIndex("FkDocumentId");

                    b.HasIndex("FkHistoryId");

                    b.ToTable("DeliveryWaybill");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryWaybillCourierDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Courier")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("DeliveryWaybillCourierDetails");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryWaybillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("BookedVolumetric");

                    b.Property<int?>("BookedVolumetricCalculationFlags");

                    b.Property<double?>("BookedWeight");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("FkDeliveryWaybillId")
                        .HasColumnName("FK_DeliveryWaybillId");

                    b.Property<Guid?>("FkDocumentId")
                        .HasColumnName("FK_DocumentId");

                    b.Property<double>("QuoteVolumetric");

                    b.Property<int>("QuoteVolumetricCalculationFlags");

                    b.Property<double>("QuoteWeight");

                    b.HasKey("Id");

                    b.HasIndex("FkDeliveryWaybillId");

                    b.HasIndex("FkDocumentId");

                    b.ToTable("DeliveryWaybillDetail");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryWaybillTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("FkDeliveryWaybillId")
                        .HasColumnName("FK_DeliveryWaybillId");

                    b.Property<int>("Type");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FkDeliveryWaybillId");

                    b.ToTable("DeliveryWaybillTracking");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Departments", b =>
                {
                    b.Property<Guid>("DepartmentId");

                    b.Property<long>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DestroyedPalletInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionarCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("date");

                    b.Property<Guid>("FkPalletId")
                        .HasColumnName("Fk_PalletId");

                    b.Property<long?>("Flags");

                    b.Property<string>("ReasonCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("DestroyedPalletInfo");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DmDevice", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmtrackBuildVersion");

                    b.Property<int>("AmtrackMajorVersion");

                    b.Property<int>("AmtrackMinorVersion");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("Flags");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Location");

                    b.Property<string>("Macaddress")
                        .HasColumnName("MACAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Make")
                        .HasMaxLength(50);

                    b.Property<string>("Model")
                        .HasMaxLength(50);

                    b.Property<int?>("OsmajorVersion")
                        .HasColumnName("OSMajorVersion");

                    b.Property<int?>("OsminorVersion")
                        .HasColumnName("OSMinorVersion");

                    b.Property<string>("Platform")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("PurchasedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Status");

                    b.Property<string>("Udid")
                        .IsRequired()
                        .HasColumnName("UDID")
                        .HasMaxLength(50);

                    b.Property<string>("Wap")
                        .HasColumnName("WAP")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("DeviceId");

                    b.ToTable("dmDevice");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DmDeviceHandler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Eta")
                        .HasColumnName("ETA")
                        .HasColumnType("datetime");

                    b.Property<int>("FkDeviceId")
                        .HasColumnName("FK_DeviceId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("FkDeviceId");

                    b.ToTable("dmDeviceHandler");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DmDeviceLogBook", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkDeviceId")
                        .HasColumnName("FK_DeviceId");

                    b.Property<Guid>("FkUserId")
                        .HasColumnName("FK_UserId");

                    b.Property<int>("Flags");

                    b.Property<DateTime>("In")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Out")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FkDeviceId");

                    b.ToTable("dmDeviceLogBook");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DmDeviceRotation", b =>
                {
                    b.Property<long>("Id");

                    b.Property<int>("FkDeviceId")
                        .HasColumnName("FK_DeviceId");

                    b.Property<Guid>("FkUserId")
                        .HasColumnName("FK_UserId");

                    b.Property<DateTime>("In")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Out")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FkDeviceId");

                    b.ToTable("dmDeviceRotation");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DmDeviceTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int?>("FkDeviceHandlerId")
                        .HasColumnName("FK_DeviceHandlerId");

                    b.Property<int>("FkDeviceId")
                        .HasColumnName("FK_DeviceId");

                    b.Property<long>("FkUserId")
                        .HasColumnName("FK_UserId");

                    b.Property<int>("Flags");

                    b.Property<int>("Subtype");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkDeviceId");

                    b.ToTable("dmDeviceTracking");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentAttachments", b =>
                {
                    b.Property<Guid>("AttachmentId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<short>("Type");

                    b.HasKey("AttachmentId");

                    b.ToTable("DocumentAttachments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentBoxDetail", b =>
                {
                    b.Property<long>("FkDocumentBoxId")
                        .HasColumnName("FK_DocumentBoxId");

                    b.Property<Guid>("FkDocumentLineId")
                        .HasColumnName("FK_DocumentLineId");

                    b.Property<int>("Quantity");

                    b.HasKey("FkDocumentBoxId", "FkDocumentLineId");

                    b.HasIndex("FkDocumentLineId")
                        .IsUnique()
                        .HasName("IX_DocumentBoxDetail");

                    b.ToTable("DocumentBoxDetail");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentBoxes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FkDocumentId")
                        .HasColumnName("FK_DocumentId");

                    b.Property<int>("Flags");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("FkDocumentId");

                    b.ToTable("DocumentBoxes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("DocumentVersion");

                    b.Property<Guid>("FkDocumentId")
                        .HasColumnName("FK_Document_Id");

                    b.Property<int>("FkHistoryContributorId")
                        .HasColumnName("FK_History_Contributor_Id");

                    b.Property<short>("Type");

                    b.HasKey("HistoryId");

                    b.HasIndex("DocumentNumber");

                    b.HasIndex("FkHistoryContributorId", "DocumentNumber", "DocumentVersion", "Type")
                        .HasName("<IX_HistorySearch>");

                    b.ToTable("Document_History");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentNotificationInfos", b =>
                {
                    b.Property<Guid>("DocumentNotificationId");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("DocumentVersion");

                    b.Property<int>("NotificationCode");

                    b.Property<string>("Recipients")
                        .IsRequired();

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("DocumentNotificationId");

                    b.ToTable("DocumentNotificationInfos");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentNumbers", b =>
                {
                    b.Property<Guid>("DocumentNumberId");

                    b.Property<DateTime?>("DateIssued")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("DocumentType");

                    b.Property<bool>("Used");

                    b.Property<int>("Value");

                    b.HasKey("DocumentNumberId");

                    b.HasIndex("DocumentNumberId", "DocumentNumber", "Value", "Used", "DateIssued", "DocumentType")
                        .HasName("IX_DocumentNumber_Type");

                    b.ToTable("DocumentNumbers");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentPallet", b =>
                {
                    b.Property<Guid>("DocumentsDocumentId")
                        .HasColumnName("Documents_DocumentId");

                    b.Property<Guid>("PalletsPalletId")
                        .HasColumnName("Pallets_PalletId");

                    b.HasKey("DocumentsDocumentId", "PalletsPalletId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PalletsPalletId");

                    b.ToTable("DocumentPallet");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentPostProcessing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("Flags");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("DocumentPostProcessing");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentPostProcessingInfoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkProcessingId")
                        .HasColumnName("FK_ProcessingId");

                    b.Property<string>("ProcessingKey")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("ProcessingValue")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkProcessingId");

                    b.ToTable("DocumentPostProcessingInfoes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentReservedStocks", b =>
                {
                    b.Property<Guid>("ReserveId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("ReservedBnd")
                        .HasColumnName("ReservedBND");

                    b.Property<int>("ReservedGlx")
                        .HasColumnName("ReservedGLX");

                    b.Property<int>("ReservedInc")
                        .HasColumnName("ReservedINC");

                    b.Property<int>("ReservedMain");

                    b.Property<int>("ReservedOvf")
                        .HasColumnName("ReservedOVF");

                    b.Property<int>("ReservedWbn")
                        .HasColumnName("ReservedWBN");

                    b.Property<int>("ReservedWmd")
                        .HasColumnName("ReservedWMD");

                    b.Property<int>("TotalQuantity");

                    b.HasKey("ReserveId");

                    b.ToTable("DocumentReservedStocks");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Documents", b =>
                {
                    b.Property<Guid>("DocumentId");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CustomerReference")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("DocumentType");

                    b.Property<short>("DocumentVersion");

                    b.Property<long?>("ExceptionFlags");

                    b.Property<long>("Flags");

                    b.Property<string>("SalesmanCode")
                        .HasMaxLength(10);

                    b.Property<long>("Status");

                    b.Property<double>("Tax");

                    b.Property<double>("TotalExcl");

                    b.Property<double>("TotalIncl");

                    b.Property<string>("Warehouse")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.HasKey("DocumentId");

                    b.HasIndex("DocumentNumber", "DocumentVersion")
                        .IsUnique()
                        .HasName("ix_Documents_DocumentNumber_DocumentVersion");

                    b.HasIndex("DocumentNumber", "DocumentVersion", "CustomerCode")
                        .HasName("ix_Documents_CustomerCode_includes");

                    b.HasIndex("DocumentNumber", "DocumentVersion", "CustomerCode", "DocumentDate")
                        .HasName("ix_Documents_DocumentDate_includes");

                    b.HasIndex("DocumentNumber", "DocumentVersion", "DocumentType", "CustomerReference")
                        .HasName("ix_Documents_DocumentType_CustomerReference_includes");

                    b.HasIndex("DocumentId", "DocumentNumber", "DocumentDate", "DocumentVersion", "TotalExcl", "TotalIncl", "Tax", "Status", "Warehouse", "CustomerReference", "CustomerCode", "SalesmanCode", "Created", "Flags", "DocumentType")
                        .HasName("ix_Documents_DocumentType_includes");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentsSkippedProcessing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DashboardProcessed");

                    b.Property<DateTime?>("DateDashboardProcessed")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateProcessed")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Processed");

                    b.Property<DateTime?>("StartProcessDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Id", "DocumentNumber", "Processed")
                        .HasName("IX_Processed_DocNumber");

                    b.ToTable("_documentsSkippedProcessing");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentSyncStates", b =>
                {
                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("OnHold");

                    b.Property<long>("ToUpdate");

                    b.HasKey("DocumentNumber");

                    b.ToTable("DocumentSyncStates");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentVersionInfoes", b =>
                {
                    b.Property<Guid>("DocumentVersionId");

                    b.Property<short>("CurrentVersion");

                    b.Property<string>("DocumentBarcode")
                        .IsRequired()
                        .HasMaxLength(13);

                    b.Property<long>("DocumentFlags");

                    b.Property<long?>("DocumentFlags2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50);

                    b.Property<string>("ParentDocumentNumber")
                        .HasMaxLength(50);

                    b.Property<string>("PickingSlipNumber")
                        .HasMaxLength(55);

                    b.HasKey("DocumentVersionId");

                    b.HasIndex("DocumentNumber")
                        .HasName("ix_DocumentVersionInfoes_DocumentNumber");

                    b.HasIndex("ParentDocumentNumber")
                        .HasName("ix_DocumentVersionInfoes_ParentDocumentNumber");

                    b.HasIndex("CurrentVersion", "DocumentVersionId", "DocumentNumber", "PickingSlipNumber", "DocumentBarcode", "DocumentFlags", "ParentDocumentNumber", "InvoiceNumber")
                        .HasName("ix_DocumentVersionInfoes_InvoiceNumber_includes");

                    b.HasIndex("DocumentVersionId", "PickingSlipNumber", "DocumentBarcode", "DocumentFlags", "ParentDocumentNumber", "InvoiceNumber", "CurrentVersion", "DocumentNumber")
                        .HasName("IX_VersionLookup");

                    b.ToTable("DocumentVersionInfoes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentVolumetric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("DocumentVersion");

                    b.Property<int>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double>("Volumetric");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.ToTable("DocumentVolumetric");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.EntityAttachmentLinks", b =>
                {
                    b.Property<long>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EntityKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("FkAttachmentId")
                        .HasColumnName("FK_AttachmentId");

                    b.Property<long>("Flags");

                    b.HasKey("LinkId");

                    b.HasIndex("EntityKey");

                    b.HasIndex("FkAttachmentId")
                        .HasName("IX_FK_EntityAttachmentsEntityAttachmentLink");

                    b.ToTable("EntityAttachmentLinks");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.EntityAttachments", b =>
                {
                    b.Property<long>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<long>("FileSize");

                    b.Property<long>("Flags");

                    b.Property<string>("Mimetype")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<short>("Type");

                    b.HasKey("AttachmentId");

                    b.ToTable("EntityAttachments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.EntityNotificationRecipients", b =>
                {
                    b.Property<string>("RecipientEmail")
                        .HasMaxLength(255);

                    b.Property<Guid>("FkNotificationId")
                        .HasColumnName("FK_NotificationId");

                    b.Property<short>("Type");

                    b.HasKey("RecipientEmail", "FkNotificationId");

                    b.HasIndex("FkNotificationId");

                    b.ToTable("EntityNotificationRecipients");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.EntityNotificationReferrals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityKey")
                        .HasMaxLength(50);

                    b.Property<int>("Flags");

                    b.Property<string>("ReferralEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<short>("Type");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("EntityNotificationReferrals");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.EntityNotifications", b =>
                {
                    b.Property<Guid>("NotificationId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("Flags");

                    b.Property<short>("TransportType");

                    b.Property<short>("Type");

                    b.Property<int>("Version");

                    b.HasKey("NotificationId");

                    b.HasIndex("EntityKey", "Type", "Version")
                        .HasName("IX_EntityNotifications_Key");

                    b.HasIndex("NotificationId", "EntityKey", "DateSent", "Type")
                        .HasName("ix_EntityNotifications_Type_includes");

                    b.ToTable("EntityNotifications");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.EntityProcesses", b =>
                {
                    b.Property<Guid>("ProcessId");

                    b.Property<DateTime>("DateProcessed")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("Flags");

                    b.Property<int?>("Status");

                    b.Property<short>("Type");

                    b.Property<int>("Version");

                    b.HasKey("ProcessId");

                    b.HasIndex("EntityKey", "Version", "Type");

                    b.ToTable("EntityProcesses");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.GenericTrackings", b =>
                {
                    b.Property<Guid>("EntityId");

                    b.Property<DateTime>("TrackingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TrackingExtra");

                    b.Property<int>("TrackingType");

                    b.Property<Guid>("UserId");

                    b.HasKey("EntityId");

                    b.ToTable("GenericTrackings");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.HistoryContributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("Flags");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<short>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique()
                        .HasName("UK_HistoryIdentifier");

                    b.ToTable("History_Contributor");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ImportStates", b =>
                {
                    b.Property<long>("ImportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("DocumentId");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImportKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ImportSource")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ImportVersion");

                    b.HasKey("ImportId");

                    b.ToTable("ImportStates");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.InvoiceInfoes", b =>
                {
                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50);

                    b.Property<string>("AuthorizerUsername")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("BranchCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<bool?>("BranchManually");

                    b.Property<string>("NotificationRecipientEmail")
                        .HasMaxLength(255);

                    b.Property<short?>("PriceRegime");

                    b.Property<string>("UserUsername")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("DocumentNumber");

                    b.HasIndex("DocumentNumber", "BranchCode")
                        .HasName("ix_InvoiceInfoes_BranchCode_includes");

                    b.ToTable("InvoiceInfoes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.InvoicingSpecials", b =>
                {
                    b.Property<int>("SpecialId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool>("FixedPrice");

                    b.Property<int?>("FixedQuantity");

                    b.Property<long>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<double?>("SpecialDiscount");

                    b.Property<string>("SpecialDiscountProject")
                        .HasMaxLength(10);

                    b.Property<int?>("SpecialLimitQuantity");

                    b.Property<string>("SpecialWarehouse")
                        .HasMaxLength(3);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("SpecialId");

                    b.ToTable("InvoicingSpecials");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ItemPalletInfo", b =>
                {
                    b.Property<string>("ItemCode")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<int>("CartonsPerLocation");

                    b.HasKey("ItemCode");

                    b.ToTable("_ItemPalletInfo");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.LineDatas", b =>
                {
                    b.Property<long>("LineDataId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdditionalStockToPull");

                    b.Property<Guid>("FkLineId")
                        .HasColumnName("FK_LineId");

                    b.Property<long>("Flags");

                    b.Property<string>("Notes");

                    b.HasKey("LineDataId");

                    b.HasIndex("FkLineId")
                        .IsUnique()
                        .HasName("UK_LineData");

                    b.ToTable("LineDatas");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.LineDisplay", b =>
                {
                    b.Property<int>("DisplayLineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<Guid>("DocumentId");

                    b.Property<long>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ItemCodeOriginal")
                        .HasMaxLength(50);

                    b.Property<double>("LineTax");

                    b.Property<double>("LineTotalExcl");

                    b.Property<double>("LineTotalIncl");

                    b.Property<int>("Quantity");

                    b.Property<short>("RowNumber");

                    b.Property<int>("Type");

                    b.Property<double>("UnitPriceExcl");

                    b.Property<double>("UnitPriceIncl");

                    b.Property<double>("UnitTax");

                    b.HasKey("DisplayLineId");

                    b.HasIndex("DocumentId")
                        .HasName("ix_LineDisplay_DocumentId");

                    b.ToTable("LineDisplay");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.LineDisplayComponents", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkDisplayLineId")
                        .HasColumnName("FK_DisplayLineId");

                    b.Property<int>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("FkDisplayLineId", "Prefix")
                        .IsUnique()
                        .HasName("IX_LineDisplayComponents");

                    b.ToTable("LineDisplayComponents");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.LineDisplayPartDetails", b =>
                {
                    b.Property<int>("FkDisplayLineId")
                        .HasColumnName("FK_DisplayLineId");

                    b.Property<string>("PartCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Flags");

                    b.Property<string>("PartColour")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PartDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.HasKey("FkDisplayLineId", "PartCode");

                    b.ToTable("LineDisplayPartDetails");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.LineLinks", b =>
                {
                    b.Property<Guid>("FkLineId")
                        .HasColumnName("FK_LineId");

                    b.Property<int>("FkDisplayLineId")
                        .HasColumnName("FK_DisplayLineId");

                    b.HasKey("FkLineId", "FkDisplayLineId");

                    b.HasIndex("FkDisplayLineId");

                    b.ToTable("LineLinks");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Lines", b =>
                {
                    b.Property<Guid>("LineId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("DiscountProject")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<Guid>("DocumentId");

                    b.Property<Guid?>("FkParentLineId")
                        .HasColumnName("FK_ParentLineId");

                    b.Property<long>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ItemCodeOriginal")
                        .HasMaxLength(50);

                    b.Property<double>("LineTax");

                    b.Property<double>("LineTotalExcl");

                    b.Property<double>("LineTotalIncl");

                    b.Property<int>("Quantity");

                    b.Property<short>("RowNumber");

                    b.Property<string>("Shelf")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Type");

                    b.Property<double>("UnitPriceExcl");

                    b.Property<double>("UnitPriceIncl");

                    b.Property<double>("UnitTax");

                    b.HasKey("LineId");

                    b.HasIndex("DocumentId")
                        .HasName("ix_Lines_DocumentId");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.LookupBrandingConversionIgnoredStocks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("ItemCode")
                        .IsUnique()
                        .HasName("UK_LookupBrandingConversionItemCode");

                    b.ToTable("LookupBrandingConversionIgnoredStocks");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.LookupClothingMensClothings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MensCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("WomensCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("MensCode")
                        .IsUnique()
                        .HasName("UK_LookupClothingMens");

                    b.HasIndex("WomensCode")
                        .IsUnique()
                        .HasName("UK_LookupClothingWomens");

                    b.ToTable("LookupClothingMensClothings");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.LookupOrderTypePriorities", b =>
                {
                    b.Property<int>("OrderType");

                    b.Property<int>("Priority");

                    b.HasKey("OrderType");

                    b.ToTable("LookupOrderTypePriorities");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.MDocuments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkMessage")
                        .HasColumnName("FK_Message");

                    b.Property<long>("Flags");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkMessage")
                        .IsUnique()
                        .HasName("IX_M_Documents");

                    b.ToTable("M_Documents");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.MessageQueueItems", b =>
                {
                    b.Property<Guid>("MessageQueueItemId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("FkEntityNotificationId")
                        .HasColumnName("FK_EntityNotificationId");

                    b.Property<short>("RetryCount");

                    b.Property<short>("Status");

                    b.Property<DateTime?>("Success")
                        .HasColumnType("datetime");

                    b.HasKey("MessageQueueItemId");

                    b.HasIndex("MessageQueueItemId", "RetryCount", "Success", "FkEntityNotificationId", "Created", "Status")
                        .HasName("IX_MessageQueueItems_Created_Status");

                    b.ToTable("MessageQueueItems");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.MessageQueueLogs", b =>
                {
                    b.Property<Guid>("MessageQueueLogId");

                    b.Property<short>("Attempt");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("FkMessageQueueItemId")
                        .HasColumnName("FK_MessageQueueItemId");

                    b.Property<string>("LogInfo")
                        .IsRequired();

                    b.Property<Guid?>("MessageQueueItemId");

                    b.HasKey("MessageQueueLogId");

                    b.ToTable("MessageQueueLogs");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.MMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("Flags");

                    b.Property<string>("MessageHeading")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MessageText")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("M_Message");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.MRecipientResponses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkStore")
                        .HasColumnName("FK_Store");

                    b.Property<long>("Flags");

                    b.Property<Guid>("RecipientId");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkStore");

                    b.ToTable("M_RecipientResponses");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.MRecipients", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkMessage")
                        .HasColumnName("FK_Message");

                    b.Property<long>("Flags");

                    b.Property<Guid>("RecipientId");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkMessage");

                    b.ToTable("M_Recipients");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.MSchedules", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DayOfWeek")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("ExpiredTime");

                    b.Property<long>("FkMessage")
                        .HasColumnName("FK_Message");

                    b.Property<long>("Flags");

                    b.Property<long?>("IntervalTimespan");

                    b.Property<string>("MonthDay")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<TimeSpan?>("Time");

                    b.Property<int>("Type");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FkMessage")
                        .IsUnique()
                        .HasName("IX_M_Schedules");

                    b.ToTable("M_Schedules");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.MStore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<long>("ExpiredTime");

                    b.Property<long>("FkMessage")
                        .HasColumnName("FK_Message");

                    b.Property<long>("Flags");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkMessage");

                    b.ToTable("M_Store");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.MTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<long?>("FkDocument")
                        .HasColumnName("FK_Document");

                    b.Property<long?>("FkMessage")
                        .HasColumnName("FK_Message");

                    b.Property<long?>("FkSchedule")
                        .HasColumnName("FK_Schedule");

                    b.Property<long?>("FkStore")
                        .HasColumnName("FK_Store");

                    b.Property<long>("Flags");

                    b.Property<Guid>("RecipientId");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("M_Tracking");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.OneTimeTokens", b =>
                {
                    b.Property<Guid>("TokenId");

                    b.Property<DateTime?>("DateConsumed")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FkUserId")
                        .HasColumnName("FK_UserId");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("TokenId");

                    b.HasIndex("FkUserId");

                    b.ToTable("OneTimeTokens");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PalletConfirmLocationBatches", b =>
                {
                    b.Property<Guid>("BatchId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FkWarehouseId")
                        .HasColumnName("FK_WarehouseId");

                    b.Property<int>("Flags");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.HasKey("BatchId");

                    b.HasIndex("FkWarehouseId");

                    b.ToTable("PalletConfirmLocationBatches");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PalletConfirmLocationExceptions", b =>
                {
                    b.Property<Guid>("ExceptionId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FkPalletId")
                        .HasColumnName("FK_PalletId");

                    b.Property<short>("Type");

                    b.HasKey("ExceptionId");

                    b.HasIndex("FkPalletId");

                    b.ToTable("PalletConfirmLocationExceptions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PalletConfirmLocationMovements", b =>
                {
                    b.Property<Guid>("MovementId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FkPalletId")
                        .HasColumnName("FK_PalletId");

                    b.Property<Guid?>("FromId");

                    b.Property<Guid?>("ToId");

                    b.Property<short>("Type");

                    b.HasKey("MovementId");

                    b.HasIndex("FkPalletId");

                    b.ToTable("PalletConfirmLocationMovements");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PalletConfirmLocationRaw", b =>
                {
                    b.Property<Guid>("RawId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("EnitityBarcode")
                        .IsRequired()
                        .HasMaxLength(13);

                    b.Property<Guid>("FkBatchId")
                        .HasColumnName("FK_BatchId");

                    b.Property<int>("FkScannedById")
                        .HasColumnName("FK_ScannedById");

                    b.Property<int>("Flags");

                    b.Property<bool>("IsValidLocationBarcode");

                    b.Property<bool>("IsValidPalletBarcode");

                    b.Property<string>("LocationBarcode")
                        .IsRequired()
                        .HasMaxLength(13);

                    b.HasKey("RawId");

                    b.HasIndex("FkBatchId");

                    b.HasIndex("FkScannedById");

                    b.ToTable("PalletConfirmLocation_Raw");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PalletContents", b =>
                {
                    b.Property<Guid>("ContentId");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50);

                    b.Property<short>("Cartons");

                    b.Property<string>("ColourCode")
                        .HasMaxLength(6);

                    b.Property<long>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("PalletId");

                    b.Property<int>("Quantity");

                    b.Property<string>("SizeCode")
                        .HasMaxLength(6);

                    b.Property<int>("UnitsPerCarton");

                    b.HasKey("ContentId");

                    b.HasIndex("PalletId");

                    b.ToTable("PalletContents");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PalletMovementErrors", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("ErrorCode");

                    b.Property<string>("ErrorMessage")
                        .IsRequired();

                    b.Property<string>("FkUserTracking")
                        .IsRequired()
                        .HasColumnName("FK_UserTracking")
                        .HasMaxLength(50);

                    b.Property<string>("FkWarehouseCode")
                        .IsRequired()
                        .HasColumnName("FK_Warehouse_Code")
                        .HasMaxLength(3);

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("PalletCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.ToTable("PalletMovementErrors");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Pallets", b =>
                {
                    b.Property<Guid>("PalletId");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(13);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CurrentStatus");

                    b.Property<Guid?>("FkWarehouseId")
                        .HasColumnName("FK_Warehouse_Id");

                    b.Property<long>("Flags");

                    b.Property<Guid?>("ShippingDocumentId");

                    b.Property<Guid?>("WarehouseLocatonWarehouseLocationId")
                        .HasColumnName("WarehouseLocaton_WarehouseLocationId");

                    b.HasKey("PalletId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("UK_PalletCode");

                    b.HasIndex("FkWarehouseId");

                    b.HasIndex("WarehouseLocatonWarehouseLocationId");

                    b.HasIndex("PalletId", "WarehouseLocatonWarehouseLocationId", "FkWarehouseId", "CurrentStatus")
                        .HasName("IX_Pallets_CurrentStatus");

                    b.ToTable("Pallets");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PalletTransferBatchContents", b =>
                {
                    b.Property<Guid>("ContentId");

                    b.Property<Guid>("FkFromWarehouseId")
                        .HasColumnName("FK_FromWarehouseId");

                    b.Property<Guid>("FkPalletTransferBatchId")
                        .HasColumnName("FK_PalletTransferBatchId");

                    b.Property<Guid>("FkToWarehouseId")
                        .HasColumnName("FK_ToWarehouseId");

                    b.Property<long>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("Quantity");

                    b.HasKey("ContentId");

                    b.HasIndex("FkPalletTransferBatchId");

                    b.ToTable("PalletTransferBatchContents");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PalletTransferBatches", b =>
                {
                    b.Property<Guid>("BatchId");

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTransferred")
                        .HasColumnType("datetime");

                    b.Property<long>("Flags");

                    b.Property<DateTime?>("Processed")
                        .HasColumnType("datetime");

                    b.HasKey("BatchId");

                    b.ToTable("PalletTransferBatches");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PaymentInfoData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkPaymentId")
                        .HasColumnName("FK_PaymentId");

                    b.Property<string>("InfoKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InfoValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkPaymentId");

                    b.ToTable("PaymentInfoData");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PaymentInfoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalReference")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("AmountCents");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long>("Flags");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Processed");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("PaymentInfoes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PaymentInfoProcessResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkPaymentId")
                        .HasColumnName("FK_PaymentId");

                    b.Property<bool>("ProcessResult");

                    b.Property<int>("ProcessType");

                    b.Property<string>("ResultMessage")
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkPaymentId");

                    b.HasIndex("Id", "Created", "ProcessResult", "ResultMessage", "FkPaymentId", "ProcessType")
                        .HasName("ix_PaymentInfoProcessResults_FK_PaymentId_ProcessType_includes");

                    b.ToTable("PaymentInfoProcessResults");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PickingInstructions", b =>
                {
                    b.Property<Guid>("InstructionId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("Entity")
                        .HasMaxLength(50);

                    b.Property<Guid>("FkPickingSlipId")
                        .HasColumnName("FK_PickingSlipId");

                    b.Property<string>("Location")
                        .HasMaxLength(50);

                    b.Property<int?>("Quantity");

                    b.Property<int>("Sequence");

                    b.Property<string>("Text")
                        .HasMaxLength(1024);

                    b.HasKey("InstructionId");

                    b.HasIndex("FkPickingSlipId");

                    b.ToTable("PickingInstructions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PickingSlipMovements", b =>
                {
                    b.Property<Guid>("MovementId");

                    b.Property<int>("FkActionerId")
                        .HasColumnName("FK_Actioner_Id");

                    b.Property<Guid>("FkPickingSlipId")
                        .HasColumnName("FK_PickingSlip_Id");

                    b.Property<int?>("FkReceiverId")
                        .HasColumnName("FK_Receiver_Id");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MovementKey")
                        .HasMaxLength(50);

                    b.Property<short>("MovementType");

                    b.HasKey("MovementId");

                    b.HasIndex("FkActionerId");

                    b.HasIndex("FkPickingSlipId");

                    b.HasIndex("FkReceiverId");

                    b.ToTable("PickingSlipMovements");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PickingSlipPrintStatus", b =>
                {
                    b.Property<string>("PickingSlipNumber")
                        .HasMaxLength(55);

                    b.Property<DateTime?>("AdminTimeDelay")
                        .HasColumnType("datetime");

                    b.Property<bool>("Cancelled");

                    b.Property<DateTime?>("DateCancelled")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDelayLifted")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatePrintDelayed")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatePrintQueued")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatePrinted")
                        .HasColumnType("datetime");

                    b.Property<bool>("DelayLifted");

                    b.Property<string>("PrintDelayReasonCode")
                        .HasMaxLength(3);

                    b.Property<bool>("PrintQueued");

                    b.Property<bool>("Printed");

                    b.Property<bool>("PrintingDelayed");

                    b.HasKey("PickingSlipNumber");

                    b.HasIndex("PrintDelayReasonCode");

                    b.ToTable("PickingSlipPrintStatus");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PickingSlipReservedStocks", b =>
                {
                    b.Property<Guid>("ReserveId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FkPickingSlipId")
                        .HasColumnName("FK_PickingSlip_Id");

                    b.Property<long>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ReservedBnd")
                        .HasColumnName("ReservedBND");

                    b.Property<int>("ReservedGlx")
                        .HasColumnName("ReservedGLX");

                    b.Property<int>("ReservedInc")
                        .HasColumnName("ReservedINC");

                    b.Property<int>("ReservedMain");

                    b.Property<int>("ReservedOvf")
                        .HasColumnName("ReservedOVF");

                    b.Property<int>("ReservedWbn")
                        .HasColumnName("ReservedWBN");

                    b.Property<int>("ReservedWmd")
                        .HasColumnName("ReservedWMD");

                    b.Property<int>("TotalQuantity");

                    b.HasKey("ReserveId");

                    b.HasIndex("FkPickingSlipId");

                    b.ToTable("PickingSlipReservedStocks");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PickingSlips", b =>
                {
                    b.Property<Guid>("PickingSlipId");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(13);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DocumentDocumentId")
                        .HasColumnName("Document_DocumentId");

                    b.Property<string>("PickingSlipNumber")
                        .IsRequired()
                        .HasMaxLength(55);

                    b.Property<long>("Status");

                    b.HasKey("PickingSlipId");

                    b.HasIndex("Barcode");

                    b.HasIndex("DocumentDocumentId")
                        .HasName("IX_FK_DocumentPickingSlip");

                    b.HasIndex("PickingSlipNumber");

                    b.ToTable("PickingSlips");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodCollectionInstructionContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("FkInstructionId")
                        .HasColumnName("FK_InstructionId");

                    b.Property<int>("Flags");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkInstructionId");

                    b.ToTable("podCollectionInstructionContainer");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodCollectionInstructionLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("FkInstructionId")
                        .HasColumnName("FK_InstructionId");

                    b.Property<int>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkInstructionId");

                    b.ToTable("podCollectionInstructionLocation");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodCollectionIntruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CloseTimestamp")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("FkParentIntructionId")
                        .HasColumnName("FK_ParentIntructionId");

                    b.Property<int>("FkPodCollectionNoteId")
                        .HasColumnName("FK_podCollectionNoteId");

                    b.Property<Guid?>("FkUserId")
                        .HasColumnName("FK_UserId");

                    b.Property<int>("Flags");

                    b.Property<DateTime?>("OpenTimestamp")
                        .HasColumnType("datetime");

                    b.Property<int>("Sequence");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkParentIntructionId");

                    b.HasIndex("FkPodCollectionNoteId", "Type", "Sequence", "Status")
                        .HasName("ix_podCollectionIntruction_FK_podCollectionNoteId_Type_Sequence_Status");

                    b.HasIndex("Id", "Created", "FkParentIntructionId", "Type", "Sequence", "OpenTimestamp", "FkUserId", "CloseTimestamp", "Status", "Flags", "FkPodCollectionNoteId")
                        .HasName("ix_podCollectionIntruction_FK_podCollectionNoteId_includes");

                    b.ToTable("podCollectionIntruction");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodCollectionNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CollectionBranchCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("ConfirmationSlipNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Courier")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DispatchStart")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FkCollectionClerk")
                        .HasColumnName("FK_CollectionClerk");

                    b.Property<Guid?>("FkDispatcher")
                        .HasColumnName("FK_Dispatcher");

                    b.Property<long?>("FkStagingLocationId")
                        .HasColumnName("FK_StagingLocationId");

                    b.Property<int>("Flags");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("FkCollectionClerk");

                    b.HasIndex("Number")
                        .HasName("ix_podCollectionNote_Number");

                    b.ToTable("podCollectionNote");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodCollectionNoteBoxInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CollectionShelf")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkPodCollectionNoteId")
                        .HasColumnName("FK_podCollectionNoteId");

                    b.Property<long>("FkWmsDocumentBoxId")
                        .HasColumnName("FK_wmsDocumentBoxId");

                    b.Property<int>("Flags");

                    b.HasKey("Id");

                    b.HasIndex("FkPodCollectionNoteId")
                        .HasName("ix_podCollectionNoteBoxInfo_FK_podCollectionNoteId");

                    b.HasIndex("FkWmsDocumentBoxId");

                    b.ToTable("podCollectionNoteBoxInfo");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodCollectionNoteDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("FkPodCollectionNoteId")
                        .HasColumnName("FK_podCollectionNoteId");

                    b.Property<int>("Flags");

                    b.Property<string>("Waybill")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkPodCollectionNoteId");

                    b.HasIndex("DocumentNumber", "Flags", "FkPodCollectionNoteId")
                        .HasName("ix_podCollectionNoteDocument_FK_podCollectionNoteId_includes");

                    b.ToTable("podCollectionNoteDocument");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodCollectionNoteWaybill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkPodCollectionNoteId")
                        .HasColumnName("FK_podCollectionNoteId");

                    b.Property<int>("Flags");

                    b.Property<string>("WaybillProviderNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkPodCollectionNoteId");

                    b.ToTable("podCollectionNoteWaybill");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodDispatchBuzzer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuzzerNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("Flags");

                    b.Property<string>("Warehouse")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("BuzzerNumber", "Warehouse")
                        .IsUnique()
                        .HasName("IX_DispatchBuzzer");

                    b.ToTable("podDispatchBuzzer");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodDispatchBuzzerAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkBuzzerId")
                        .HasColumnName("FK_BuzzerId");

                    b.Property<int>("FkPodCollectionNoteId")
                        .HasColumnName("FK_podCollectionNoteId");

                    b.Property<int>("Flags");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("FkBuzzerId");

                    b.HasIndex("FkPodCollectionNoteId");

                    b.ToTable("podDispatchBuzzerAllocation");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodDispatchBuzzerAllocationTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkBuzzerAllocationId")
                        .HasColumnName("FK_BuzzerAllocationId");

                    b.Property<Guid?>("FkUserId")
                        .HasColumnName("FK_UserId");

                    b.Property<int>("Flags");

                    b.Property<int>("TypeCode");

                    b.HasKey("Id");

                    b.HasIndex("FkBuzzerAllocationId");

                    b.HasIndex("FkUserId");

                    b.HasIndex("Created", "FkUserId", "FkBuzzerAllocationId", "TypeCode")
                        .HasName("ix_podDispatchBuzzerAllocationTracking_FK_BuzzerAllocationId_TypeCode_includes");

                    b.ToTable("podDispatchBuzzerAllocationTracking");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PrintDelayedReasons", b =>
                {
                    b.Property<string>("ReasonCode")
                        .HasMaxLength(3);

                    b.Property<string>("Reason")
                        .IsRequired();

                    b.HasKey("ReasonCode");

                    b.ToTable("PrintDelayedReasons");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Printers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("FkBranchId")
                        .HasColumnName("FK_BranchId");

                    b.Property<int>("FormatType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PrintFolder")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkBranchId");

                    b.ToTable("Printers");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ProductPurchaseRecords", b =>
                {
                    b.Property<Guid>("PurchaseId");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double>("DollarCost");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PurchaseId");

                    b.ToTable("ProductPurchaseRecords");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.QuoteDocuments", b =>
                {
                    b.Property<Guid>("QuoteDocumentId");

                    b.Property<string>("AccountManager")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("DocumentCreatetor")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("DocumentType");

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<string>("Message")
                        .HasMaxLength(400);

                    b.HasKey("QuoteDocumentId");

                    b.HasIndex("DocumentNumber");

                    b.HasIndex("DocumentType")
                        .HasName("ix_QuoteDocuments_DocumentType");

                    b.HasIndex("QuoteDocumentId", "DocumentNumber", "DocumentDate", "DocumentType", "DocumentCreatetor", "CustomerCode")
                        .HasName("NonClusteredIndex-20121127-105713");

                    b.ToTable("QuoteDocuments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.QuoteLines", b =>
                {
                    b.Property<Guid>("QuoteLineId");

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double?>("Price");

                    b.Property<Guid>("QuoteDocumentQuoteDocumentId");

                    b.Property<int>("SequenceCode");

                    b.HasKey("QuoteLineId");

                    b.HasIndex("QuoteDocumentQuoteDocumentId")
                        .HasName("IX_FK_QuoteDocumentQuoteLine");

                    b.ToTable("QuoteLines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReservationInfoes", b =>
                {
                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("DocumentNumber");

                    b.ToTable("ReservationInfoes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReservedStockAdjustmentTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("FromWarehouse")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("MiniPallet")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Picker")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("Quantity");

                    b.Property<long>("QueryId");

                    b.Property<string>("ToWarehouse")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ReservedStockAdjustmentTransactions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReservedStocks", b =>
                {
                    b.Property<string>("ItemCode")
                        .HasMaxLength(50);

                    b.Property<int>("ReservedBnd")
                        .HasColumnName("ReservedBND");

                    b.Property<int>("ReservedGlx")
                        .HasColumnName("ReservedGLX");

                    b.Property<int>("ReservedInc")
                        .HasColumnName("ReservedINC");

                    b.Property<int>("ReservedMain");

                    b.Property<int>("ReservedOvf")
                        .HasColumnName("ReservedOVF");

                    b.Property<int>("ReservedWbn")
                        .HasColumnName("ReservedWBN");

                    b.Property<int>("ReservedWmd")
                        .HasColumnName("ReservedWMD");

                    b.HasKey("ItemCode");

                    b.ToTable("ReservedStocks");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Rework", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("FkSkippedUserId")
                        .HasColumnName("FK_SkippedUserId");

                    b.Property<long?>("FkUserId")
                        .HasColumnName("FK_UserId");

                    b.Property<int>("Flags");

                    b.Property<long?>("JobCardId");

                    b.Property<string>("JobCardNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LinkUserDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SkippedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SkippedReason")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DocumentNumber", "JobCardId", "Status", "Type")
                        .HasName("ix_Rework_DocumentNumber_JobCardId_Status_Type");

                    b.ToTable("Rework");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkBoxes", b =>
                {
                    b.Property<long>("FkWmsDocucmentBoxId")
                        .HasColumnName("FK_wmsDocucmentBoxId");

                    b.Property<long>("FkReworkId")
                        .HasColumnName("FK_ReworkId");

                    b.HasKey("FkWmsDocucmentBoxId", "FkReworkId");

                    b.HasIndex("FkReworkId");

                    b.ToTable("ReworkBoxes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkDocuments", b =>
                {
                    b.Property<long>("FkWmsDocumentId")
                        .HasColumnName("FK_wmsDocumentId");

                    b.Property<long>("FkReworkId")
                        .HasColumnName("FK_ReworkId");

                    b.HasKey("FkWmsDocumentId", "FkReworkId");

                    b.HasIndex("FkReworkId");

                    b.ToTable("ReworkDocuments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkInstructionBoxes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoxBarcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("BoxName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkReworkInstructionMasterBoxId")
                        .HasColumnName("FK_ReworkInstructionMasterBoxId");

                    b.Property<int>("Flags");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkReworkInstructionMasterBoxId");

                    b.ToTable("ReworkInstructionBoxes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkInstructionData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkReworkInstructionId")
                        .HasColumnName("FK_ReworkInstructionId");

                    b.Property<int>("Flags");

                    b.Property<int?>("IntValue");

                    b.Property<int?>("IntValue2");

                    b.Property<int>("Status");

                    b.Property<string>("StringValue")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("StringValue2")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkReworkInstructionId");

                    b.ToTable("ReworkInstructionData");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkInstructionLines", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkReworkInstructionMasterLineId")
                        .HasColumnName("FK_ReworkInstructionMasterLineId");

                    b.Property<int>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("OriginalQuantity");

                    b.Property<int?>("Quantity");

                    b.Property<string>("Reference")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("ReferenceType");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkReworkInstructionMasterLineId");

                    b.ToTable("ReworkInstructionLines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkInstructionMasterBoxes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoxBarcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("BoxName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long?>("FkReworkInstructionId")
                        .HasColumnName("FK_ReworkInstructionId");

                    b.Property<int>("Flags");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkReworkInstructionId");

                    b.ToTable("ReworkInstructionMasterBoxes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkInstructionMasterLines", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long?>("FkReworkInstructionId")
                        .HasColumnName("FK_ReworkInstructionId");

                    b.Property<long?>("FkReworkInstructionMasterBoxId")
                        .HasColumnName("FK_ReworkInstructionMasterBoxId");

                    b.Property<int>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("OriginalQuantity");

                    b.Property<int?>("Quantity");

                    b.Property<string>("Reference")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("ReferenceType");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkReworkInstructionId");

                    b.HasIndex("FkReworkInstructionMasterBoxId");

                    b.ToTable("ReworkInstructionMasterLines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkInstructions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long?>("FkBusyWithUserId")
                        .HasColumnName("FK_BusyWithUserId");

                    b.Property<long?>("FkCompletedByUserId")
                        .HasColumnName("FK_CompletedByUserId");

                    b.Property<long?>("FkOpenByUserId")
                        .HasColumnName("FK_OpenByUserId");

                    b.Property<long>("FkReworkId")
                        .HasColumnName("FK_ReworkId");

                    b.Property<int>("Flags");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Sequence");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkReworkId");

                    b.ToTable("ReworkInstructions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("ReworkReport");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.RushDocumentDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CollectionDate")
                        .HasColumnType("date");

                    b.Property<string>("CourierName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("FkRushAccount")
                        .HasColumnName("FK_RushAccount");

                    b.Property<long>("Flags");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<string>("Waybill")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DocumentNumber")
                        .IsUnique()
                        .HasName("IX_RushDocumentDetail");

                    b.ToTable("RushDocumentDetail");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ScannedConveyerParcels", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Document")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ScannedConveyerParcels");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SecurityLevels", b =>
                {
                    b.Property<Guid>("SecurityLevelId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SecurityLevelId");

                    b.ToTable("SecurityLevels");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SecurityLevelSecurityPermission", b =>
                {
                    b.Property<Guid>("SecurityLevelsSecurityLevelId")
                        .HasColumnName("SecurityLevels_SecurityLevelId");

                    b.Property<Guid>("SecurityPermissionsSecurityPermissionId")
                        .HasColumnName("SecurityPermissions_SecurityPermissionId");

                    b.HasKey("SecurityLevelsSecurityLevelId", "SecurityPermissionsSecurityPermissionId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SecurityPermissionsSecurityPermissionId");

                    b.ToTable("SecurityLevelSecurityPermission");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SecurityPermissions", b =>
                {
                    b.Property<Guid>("SecurityPermissionId");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SecurityPermissionId");

                    b.ToTable("SecurityPermissions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SentClientNotifications", b =>
                {
                    b.Property<Guid>("NotificationId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityIdentifier")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("Flags");

                    b.Property<string>("SentBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SentToEmails")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("SentToIdentifier")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<short>("Type");

                    b.HasKey("NotificationId");

                    b.ToTable("SentClientNotifications");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ServerDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommonDatabaseName")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("DatabaseName")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PastelAuthKey")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("PastelSerialNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int>("Type");

                    b.Property<string>("Url")
                        .HasColumnName("URL")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Username")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ServerDetails");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShipmentCommercialBrandingDocumentLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FkCommerBrandingDocumentId")
                        .HasColumnName("FK_CommerBrandingDocumentId");

                    b.Property<int?>("FkShipmentCommercialBrandingDocumentId")
                        .HasColumnName("FK_ShipmentCommercialBrandingDocumentId");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("FkCommerBrandingDocumentId");

                    b.HasIndex("FkShipmentCommercialBrandingDocumentId");

                    b.ToTable("ShipmentCommercialBrandingDocumentLines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShipmentCommercialBrandingDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DestinationBranchCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int?>("FkCommerBrandingDocumentId")
                        .HasColumnName("FK_CommerBrandingDocumentId");

                    b.Property<int?>("FkShipmentId")
                        .HasColumnName("FK_ShipmentId");

                    b.Property<int>("Flags");

                    b.Property<string>("ParentDocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SourceCompanyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("FkCommerBrandingDocumentId");

                    b.HasIndex("FkShipmentId");

                    b.ToTable("ShipmentCommercialBrandingDocuments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShipmentDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BoxSize");

                    b.Property<double>("BoxValue");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkShipmentId")
                        .HasColumnName("FK_ShipmentId");

                    b.Property<long>("FkWmsDocumentBoxId")
                        .HasColumnName("FK_wmsDocumentBoxId");

                    b.HasKey("Id");

                    b.HasIndex("FkShipmentId");

                    b.HasIndex("FkWmsDocumentBoxId");

                    b.ToTable("ShipmentDetail");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShipmentNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("LastNumberUsed");

                    b.HasKey("Id");

                    b.ToTable("ShipmentNumber");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShipmentProcessTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<int>("FkShipmentId")
                        .HasColumnName("FK_ShipmentId");

                    b.Property<int>("Flags");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkShipmentId");

                    b.ToTable("ShipmentProcessTracking");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShipmentReservesRecycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("FkShipmentId")
                        .HasColumnName("FK_ShipmentId");

                    b.Property<int>("Flags");

                    b.Property<string>("InterBranchStockReservationDocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("FkShipmentId");

                    b.ToTable("ShipmentReservesRecycle");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Shipments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchShipmentType");

                    b.Property<string>("CommercialDocumentNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CommercialInvoiceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DestinationBranchCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<Guid>("FkCreatedUserId")
                        .HasColumnName("FK_CreatedUserId");

                    b.Property<int>("Flags");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Ponumber")
                        .HasColumnName("PONumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SourceCompanyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<double?>("Value");

                    b.Property<double?>("Volume");

                    b.HasKey("Id");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShippingDestinations", b =>
                {
                    b.Property<int>("ShippingDestinationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkShippingServiceId")
                        .HasColumnName("FK_ShippingService_Id");

                    b.Property<long>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<short>("OutlyingKm");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<string>("Province")
                        .IsRequired();

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<short>("ServiceType");

                    b.Property<short>("TownType");

                    b.HasKey("ShippingDestinationId");

                    b.HasIndex("FkShippingServiceId");

                    b.ToTable("ShippingDestinations");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShippingProviderConfigurations", b =>
                {
                    b.Property<int>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkShippingProviderId")
                        .HasColumnName("FK_ShippingProvider_Id");

                    b.Property<long>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ConfigurationId");

                    b.HasIndex("FkShippingProviderId");

                    b.ToTable("ShippingProviderConfigurations");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShippingProviders", b =>
                {
                    b.Property<int>("ShippingProviderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ShippingProviderId");

                    b.ToTable("ShippingProviders");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShippingRates", b =>
                {
                    b.Property<int>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkShippingDestinationId")
                        .HasColumnName("FK_ShippingDestination_Id");

                    b.Property<long>("Flags");

                    b.Property<float>("MinimumCharge");

                    b.Property<short>("MinimumWeight");

                    b.Property<float>("OutlyingRatePerKm");

                    b.Property<float>("RatePerKg");

                    b.Property<float>("RegionalRatePerKg");

                    b.HasKey("RateId");

                    b.HasIndex("FkShippingDestinationId");

                    b.ToTable("ShippingRates");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShippingServices", b =>
                {
                    b.Property<int>("ShippingServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkShippingProviderId")
                        .HasColumnName("FK_ShippingProvider_Id");

                    b.Property<long>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ShippingServiceId");

                    b.HasIndex("FkShippingProviderId");

                    b.ToTable("ShippingServices");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SpecialDates", b =>
                {
                    b.Property<Guid>("SpecialDateId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("SpecialDateValue")
                        .HasColumnType("datetime");

                    b.Property<long>("SpecialDatesFlag");

                    b.Property<long>("Year");

                    b.HasKey("SpecialDateId");

                    b.HasIndex("Year", "SpecialDateValue")
                        .IsUnique()
                        .HasName("NonClusteredIndex-20121210-122534");

                    b.ToTable("SpecialDates");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SrReceiptCompletedLines", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkReceiptId")
                        .HasColumnName("FK_ReceiptId");

                    b.Property<long>("FkSrReceiptLineId")
                        .HasColumnName("FK_SR_ReceiptLineId");

                    b.Property<int>("FkStockItemUomtemplateId")
                        .HasColumnName("FK_Stock_ItemUOMTemplateId");

                    b.Property<int>("Flags");

                    b.Property<int>("Quantity");

                    b.Property<int>("Status");

                    b.Property<int>("TotalQuantity");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkReceiptId");

                    b.HasIndex("FkSrReceiptLineId");

                    b.ToTable("SR_ReceiptCompletedLines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SrReceiptLines", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkReceiptId")
                        .HasColumnName("FK_ReceiptId");

                    b.Property<int>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Quantity");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkReceiptId");

                    b.ToTable("SR_ReceiptLines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SrReceipts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("Flags");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("SR_Receipts");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SrReceiptTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkSrReceiptId")
                        .HasColumnName("FK_SR_ReceiptId");

                    b.Property<long?>("FkSrReceiptLineId")
                        .HasColumnName("FK_SR_ReceiptLineId");

                    b.Property<long?>("FkUserId")
                        .HasColumnName("FK_UserId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkSrReceiptId");

                    b.HasIndex("FkSrReceiptLineId");

                    b.ToTable("SR_ReceiptTracking");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.StockTakeBatches", b =>
                {
                    b.Property<Guid>("BatchId");

                    b.Property<Guid>("AuthorId");

                    b.Property<short>("ClassType");

                    b.Property<DateTime?>("Closed")
                        .HasColumnType("datetime");

                    b.Property<int>("Flags");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<DateTime>("Started")
                        .HasColumnType("datetime");

                    b.Property<byte>("Status");

                    b.HasKey("BatchId");

                    b.ToTable("StockTakeBatches");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.StockTakeRecords", b =>
                {
                    b.Property<Guid>("RecordId");

                    b.Property<string>("ExpectedItem")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("FkStockTakeBatchId")
                        .HasColumnName("FK_StockTakeBatchId");

                    b.Property<int>("Flags");

                    b.Property<long?>("LegacyLocationId");

                    b.Property<Guid?>("LocationId");

                    b.Property<byte>("RecordType");

                    b.Property<string>("ResolvedComment")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("ResolvedType");

                    b.Property<Guid?>("ResolvedUserId");

                    b.Property<string>("ScannedItem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("RecordId");

                    b.HasIndex("FkStockTakeBatchId");

                    b.ToTable("StockTakeRecords");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.StockTakeUnProcessedBatchEntries", b =>
                {
                    b.Property<Guid>("BatchEntryId");

                    b.Property<Guid>("AuthorId");

                    b.Property<DateTime>("DateScanned")
                        .HasColumnType("datetime");

                    b.Property<string>("EntryKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("EntryType");

                    b.Property<Guid>("FkStockTakeBatchId")
                        .HasColumnName("FK_StockTakeBatchId");

                    b.Property<long>("Flags");

                    b.Property<Guid?>("LocationId");

                    b.HasKey("BatchEntryId");

                    b.HasIndex("FkStockTakeBatchId");

                    b.ToTable("StockTakeUnProcessedBatchEntries");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SuggestedReOrderPallets", b =>
                {
                    b.Property<Guid>("WarehouseReOrderId");

                    b.Property<Guid>("PalletId");

                    b.HasKey("WarehouseReOrderId", "PalletId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PalletId")
                        .HasName("IX_FK_PalletSuggestedReOrderPallet");

                    b.ToTable("SuggestedReOrderPallets");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SwadSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day");

                    b.Property<int>("DimError")
                        .HasColumnName("Dim_Error");

                    b.Property<bool>("Finalised");

                    b.Property<int>("Hour");

                    b.Property<int>("Minutes");

                    b.Property<int>("Month");

                    b.Property<int>("ReadError")
                        .HasColumnName("Read_Error");

                    b.Property<int>("Total");

                    b.Property<int>("WeightError")
                        .HasColumnName("Weight_Error");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("SwadSummary");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SyncDataErrorDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Detail")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("FkSyncDataErrorId")
                        .HasColumnName("FK_SyncDataErrorId");

                    b.Property<int>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkSyncDataErrorId");

                    b.ToTable("SyncDataErrorDetail");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SyncDataErrorRecipients", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<long>("FkSyncDataErrorId")
                        .HasColumnName("FK_SyncDataErrorId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkSyncDataErrorId");

                    b.ToTable("SyncDataErrorRecipients");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SyncDataErrors", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Flags");

                    b.Property<int>("Status");

                    b.Property<string>("SyncSource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Type");

                    b.Property<string>("TypeKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("SyncDataErrors");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.TaxRates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("Flags");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("PastelLookup")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<double>("Rate");

                    b.Property<int?>("XfxHostId")
                        .HasColumnName("XFX_HostId");

                    b.HasKey("Id");

                    b.ToTable("TaxRates");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.TempNotCreatable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cartons");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("Total");

                    b.Property<int>("Upc")
                        .HasColumnName("UPC");

                    b.HasKey("Id");

                    b.ToTable("_TempNotCreatable");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.TempPalletCodes", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(12);

                    b.HasKey("Code");

                    b.ToTable("_TempPalletCodes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.TempPrices", b =>
                {
                    b.Property<string>("ItemCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("ItemCode");

                    b.ToTable("_tempPrices");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.TurnOverTest", b =>
                {
                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double>("Total");

                    b.HasKey("DocumentNumber");

                    b.ToTable("_TurnOverTest");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.TurnoverTransactionDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("FkLineId")
                        .HasColumnName("FK_Line_Id");

                    b.Property<long>("FkTurnoverId")
                        .HasColumnName("FK_Turnover_Id");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<int>("ItemDiff");

                    b.Property<double>("TotalDiff");

                    b.HasKey("Id");

                    b.ToTable("TurnoverTransactionDetails");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.TurnoverTransactions", b =>
                {
                    b.Property<long>("TurnOverId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<short>("DocumentVersion");

                    b.Property<double>("TotalExcl");

                    b.Property<double>("TotalExclDiff");

                    b.Property<short>("Type");

                    b.HasKey("TurnOverId");

                    b.ToTable("_TurnoverTransactions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.TurnoverTransactions1", b =>
                {
                    b.Property<long>("TurnOverId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AudDate")
                        .HasColumnName("audDate")
                        .HasColumnType("datetime");

                    b.Property<double>("BrandingExcl");

                    b.Property<double>("ClothingExcl");

                    b.Property<double>("CostBranding");

                    b.Property<double>("CostClothing");

                    b.Property<double>("CostGifts");

                    b.Property<double?>("CostHeadwearExcl");

                    b.Property<double>("CostOther");

                    b.Property<double>("CostTotal");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("DocumentVersion");

                    b.Property<long>("Flags");

                    b.Property<double>("GiftsExcl");

                    b.Property<double?>("HeadwearExcl");

                    b.Property<double>("OtherExcl");

                    b.Property<double>("TotalExcl");

                    b.Property<double>("TotalExclDiff");

                    b.Property<short>("Type");

                    b.HasKey("TurnOverId");

                    b.HasIndex("TurnOverId", "DocumentNumber", "DocumentVersion")
                        .HasName("IX_TurnOver_Documents");

                    b.HasIndex("DocumentNumber", "DocumentVersion", "Flags", "Type")
                        .HasName("ix_TurnoverTransactions_Type_includes");

                    b.HasIndex("DocumentNumber", "DocumentVersion", "Flags", "Type", "DateAdded")
                        .HasName("ix_TurnoverTransactions_Type_DateAdded_includes");

                    b.HasIndex("DocumentNumber", "DocumentVersion", "GiftsExcl", "ClothingExcl", "BrandingExcl", "CostGifts", "CostClothing", "HeadwearExcl", "CostHeadwearExcl", "DateAdded", "Type")
                        .HasName("ix_TurnoverTransactions_DateAdded_Type_includes");

                    b.ToTable("TurnoverTransactions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.TurnoverTransfers", b =>
                {
                    b.Property<long>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTransferFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateTransferTo")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("DocumentVersion");

                    b.Property<long>("Flags");

                    b.HasKey("TransferId");

                    b.ToTable("TurnoverTransfers");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.UserBranches", b =>
                {
                    b.Property<Guid>("FkUserId")
                        .HasColumnName("FK_UserId");

                    b.Property<long>("FkBranchId")
                        .HasColumnName("FK_BranchId");

                    b.HasKey("FkUserId", "FkBranchId");

                    b.HasIndex("FkBranchId");

                    b.ToTable("UserBranches");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.UserDepartment", b =>
                {
                    b.Property<Guid>("UsersUserId")
                        .HasColumnName("Users_UserId");

                    b.Property<Guid>("DepartmentsDepartmentId")
                        .HasColumnName("Departments_DepartmentId");

                    b.HasKey("UsersUserId", "DepartmentsDepartmentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("DepartmentsDepartmentId");

                    b.ToTable("UserDepartment");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.UserLink", b =>
                {
                    b.Property<Guid>("FkPrimaryUserId")
                        .HasColumnName("FK_PrimaryUserId");

                    b.Property<Guid>("FkLinkUserId")
                        .HasColumnName("FK_LinkUserId");

                    b.Property<int>("Type");

                    b.Property<int>("Flags");

                    b.HasKey("FkPrimaryUserId", "FkLinkUserId", "Type");

                    b.ToTable("UserLink");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Users", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("Barcode")
                        .HasMaxLength(13);

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Fax2Email")
                        .HasMaxLength(20);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("Flags");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("Password");

                    b.Property<string>("PhoneDirect")
                        .HasColumnName("Phone_Direct")
                        .HasMaxLength(20);

                    b.Property<string>("PhoneMobile")
                        .HasColumnName("Phone_Mobile")
                        .HasMaxLength(20);

                    b.Property<string>("PrimaryEmail")
                        .HasMaxLength(100);

                    b.Property<string>("SalesmanCode")
                        .HasMaxLength(10);

                    b.Property<string>("ScaleClientUrl")
                        .HasColumnName("SCALE_ClientUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("ScaleDeviceScanSuffix")
                        .HasColumnName("SCALE_DeviceScanSuffix");

                    b.Property<string>("ScaleDomain")
                        .HasColumnName("SCALE_Domain")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ScalePassword")
                        .HasColumnName("SCALE_Password")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ScaleServer")
                        .HasColumnName("SCALE_Server")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ScaleUsername")
                        .HasColumnName("SCALE_Username")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SecurityLevelSecurityLevelId");

                    b.Property<long>("Status");

                    b.Property<string>("TrackingCode")
                        .HasMaxLength(50);

                    b.Property<Guid?>("UserUserId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("UserId");

                    b.HasIndex("SecurityLevelSecurityLevelId");

                    b.HasIndex("UserUserId");

                    b.HasIndex("Firstname", "Lastname", "PhoneDirect", "PhoneMobile", "PrimaryEmail", "SecondaryEmail", "Fax2Email", "EmployeeCode", "Username")
                        .HasName("ix_Users_Username_includes");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.UserSecurityPermission", b =>
                {
                    b.Property<Guid>("UsersUserId")
                        .HasColumnName("Users_UserId");

                    b.Property<Guid>("SecurityPermissionsSecurityPermissionId")
                        .HasColumnName("SecurityPermissions_SecurityPermissionId");

                    b.HasKey("UsersUserId", "SecurityPermissionsSecurityPermissionId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SecurityPermissionsSecurityPermissionId");

                    b.ToTable("UserSecurityPermission");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.UtiBondedIntegrationAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("FileLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("ItemCount");

                    b.Property<int>("MessageId");

                    b.HasKey("Id");

                    b.ToTable("UTI_BondedIntegrationAudit");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WarehouseEntityMovements", b =>
                {
                    b.Property<Guid>("MovementId");

                    b.Property<Guid>("EntityId");

                    b.Property<string>("EntityType")
                        .IsRequired();

                    b.Property<Guid?>("LocationFromId");

                    b.Property<Guid?>("LocationToId");

                    b.Property<string>("MovementActionarCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MovementCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MovementDetails")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("MovementId");

                    b.HasIndex("EntityId", "MovementDate", "LocationFromId", "LocationToId", "MovementCode")
                        .HasName("IX_WarehouseEntityMovements_MovementCode");

                    b.ToTable("WarehouseEntityMovements");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WarehouseLocations", b =>
                {
                    b.Property<Guid>("WarehouseLocationId");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(13);

                    b.Property<string>("Bay")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<short>("Capacity");

                    b.Property<int>("Flags");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Isle");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("Type");

                    b.Property<Guid>("WarehouseWarehouseId");

                    b.HasKey("WarehouseLocationId");

                    b.HasIndex("WarehouseWarehouseId");

                    b.ToTable("WarehouseLocations");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WarehouseMinimumReorders", b =>
                {
                    b.Property<Guid>("ReorderId");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("ReorderLevel");

                    b.Property<Guid>("WarehouseId");

                    b.HasKey("ReorderId");

                    b.ToTable("WarehouseMinimumReorders");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WarehouseNotifications", b =>
                {
                    b.Property<Guid>("NotificationId");

                    b.Property<bool>("IncludeExclude");

                    b.Property<string>("RecipientEmail")
                        .HasMaxLength(1024);

                    b.Property<Guid?>("RecipientId");

                    b.Property<short>("RecipientType");

                    b.Property<short>("Type");

                    b.Property<Guid>("WarehouseId");

                    b.HasKey("NotificationId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseNotifications");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WarehouseReorders", b =>
                {
                    b.Property<Guid>("ReOrderId");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("WarehouseId");

                    b.HasKey("ReOrderId");

                    b.ToTable("WarehouseReorders");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WarehouseReplenishments", b =>
                {
                    b.Property<Guid>("ReplenishmentId");

                    b.Property<Guid>("ReceivingWarehouseId");

                    b.Property<Guid>("ReplenismentWarehouseId");

                    b.Property<int>("Sequence");

                    b.HasKey("ReplenishmentId");

                    b.ToTable("WarehouseReplenishments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Warehouses", b =>
                {
                    b.Property<Guid>("WarehouseId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<int>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WarehouseStockStorageMovements", b =>
                {
                    b.Property<Guid>("MovementId");

                    b.Property<long?>("FkExternalDocumentId")
                        .HasColumnName("FK_ExternalDocument_Id");

                    b.Property<int>("FkHistoryId")
                        .HasColumnName("FK_History_Id");

                    b.Property<Guid?>("FkPalletId")
                        .HasColumnName("FK_Pallet_Id");

                    b.Property<Guid>("FkStockStorageId")
                        .HasColumnName("FK_StockStorage_Id");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity");

                    b.Property<short>("Type");

                    b.HasKey("MovementId");

                    b.HasIndex("FkHistoryId");

                    b.HasIndex("FkPalletId");

                    b.HasIndex("FkStockStorageId");

                    b.ToTable("WarehouseStockStorageMovements");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WarehouseStockStorages", b =>
                {
                    b.Property<Guid>("StorageId");

                    b.Property<Guid>("FkWarehouseId")
                        .HasColumnName("FK_Warehouse_Id");

                    b.Property<long>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Qc")
                        .HasColumnName("QC");

                    b.Property<int>("Quantity");

                    b.HasKey("StorageId");

                    b.HasIndex("FkWarehouseId");

                    b.HasIndex("ItemCode", "FkWarehouseId", "Qc")
                        .IsUnique()
                        .HasName("UK_WarehouseStockStorages");

                    b.ToTable("WarehouseStockStorages");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WdbActiveJobcards", b =>
                {
                    b.Property<string>("JobCardNumber")
                        .HasMaxLength(55)
                        .IsUnicode(false);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("date");

                    b.Property<string>("CustomerReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("date");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("JobCardDate")
                        .HasColumnType("date");

                    b.Property<long>("JobCardId");

                    b.Property<long>("JobCardStatus");

                    b.Property<string>("JobCardStatusText")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long>("OrderId");

                    b.Property<int>("PrintColours");

                    b.Property<string>("PrintDepartment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PrintProcessCode")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("PrintProcessDescription")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("PrintStockItem")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.HasKey("JobCardNumber");

                    b.ToTable("wdbActiveJobcards");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WdbActiveOrders", b =>
                {
                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("CurrentWarehouse")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("CurrentWarehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CustomerReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("DeliveryStatus");

                    b.Property<string>("DeliveryStatusText")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DestinationWarehouse")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("DestinationWarehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("date");

                    b.Property<long?>("DocumentExtraFlags");

                    b.Property<long?>("DocumentFlags");

                    b.Property<long>("DocumentStatus");

                    b.Property<string>("DocumentStatusText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("FirstStockLine")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IsDeliveryOrder");

                    b.Property<bool?>("IsPartOfDelivery");

                    b.Property<int>("LineCount");

                    b.Property<long>("OrderId");

                    b.Property<int?>("TotalBoxes");

                    b.Property<double>("TotalExcl");

                    b.Property<double>("TotalIncl");

                    b.HasKey("DocumentNumber");

                    b.HasIndex("DocumentNumber", "OrderId", "AccountName", "CustomerReference", "DocumentDate", "InvoiceNumber", "DocumentStatusText", "DocumentStatus", "FirstStockLine", "LineCount", "TotalExcl", "TotalIncl", "CurrentWarehouse", "DestinationWarehouse", "CurrentWarehouseName", "DestinationWarehouseName", "TotalBoxes", "DocumentFlags", "AccountNumber")
                        .HasName("ix_wdbActiveOrders_AccountNumber_includes");

                    b.ToTable("wdbActiveOrders");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WdbRecentCreditNotes", b =>
                {
                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("CustomerReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstLineItem")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<int>("LineCount");

                    b.Property<string>("LinkDocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double>("TotalExcl");

                    b.Property<double>("TotalIncl");

                    b.HasKey("DocumentNumber");

                    b.ToTable("wdbRecentCreditNotes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WdbResync", b =>
                {
                    b.Property<string>("CustomerCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<bool>("SyncComplete");

                    b.HasKey("CustomerCode");

                    b.ToTable("_wdbResync");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentBoxDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkWmsDocumentBoxId")
                        .HasColumnName("FK_wmsDocumentBoxId");

                    b.Property<long?>("FkWmsDocumentBoxMasterDetailId")
                        .HasColumnName("FK_WmsDocumentBoxMasterDetailId");

                    b.Property<int>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Quantity");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkWmsDocumentBoxId");

                    b.HasIndex("FkWmsDocumentBoxMasterDetailId");

                    b.HasIndex("ItemCode", "Quantity", "FkWmsDocumentBoxId")
                        .HasName("ix_wmsDocumentBoxDetail_FK_wmsDocumentBoxId_includes");

                    b.HasIndex("Id", "FkWmsDocumentBoxId", "Created", "ItemCode", "Quantity", "Type", "Status", "Flags", "FkWmsDocumentBoxMasterDetailId")
                        .HasName("ix_wmsDocumentBoxDetail_FK_WmsDocumentBoxMasterDetailId_includes");

                    b.ToTable("wmsDocumentBoxDetail");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentBoxes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("BoxSource");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long?>("FkLocationId")
                        .HasColumnName("FK_LocationId");

                    b.Property<long?>("FkWmsDocumentBoxMasterId")
                        .HasColumnName("FK_WmsDocumentBoxMasterId");

                    b.Property<long>("Flags");

                    b.Property<string>("LocationName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Number");

                    b.Property<int>("Status");

                    b.Property<int>("SwadinfoCounter")
                        .HasColumnName("SWADInfoCounter");

                    b.Property<long?>("TempFkWmsDocumentId")
                        .HasColumnName("TempFK_WmsDocumentId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkWmsDocumentBoxMasterId");

                    b.HasIndex("Id", "Flags", "LocationName")
                        .HasName("ix_wmsDocumentBoxes_LocationName_includes");

                    b.HasIndex("Id", "FkWmsDocumentBoxMasterId", "Created", "Flags", "Barcode")
                        .HasName("ix_wmsDocumentBoxes_Barcode_includes");

                    b.HasIndex("Id", "Name", "FkLocationId", "Type", "Status", "Flags", "SwadinfoCounter", "FkWmsDocumentBoxMasterId", "Barcode")
                        .HasName("ix_wmsDocumentBoxes_FK_WmsDocumentBoxMasterId_Barcode_includes");

                    b.HasIndex("Id", "Created", "Barcode", "Name", "Number", "FkLocationId", "LocationName", "BoxSource", "Type", "Status", "Flags", "SwadinfoCounter", "FkWmsDocumentBoxMasterId")
                        .HasName("ix_wmsDocumentBoxes_FK_WmsDocumentBoxMasterId_includes");

                    b.ToTable("wmsDocumentBoxes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentBoxInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FkWmsDocumentBoxId")
                        .HasColumnName("FK_wmsDocumentBoxId");

                    b.Property<int>("Flags");

                    b.Property<double?>("Height");

                    b.Property<string>("HeightUnit")
                        .HasColumnName("Height_Unit")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("Length");

                    b.Property<string>("LengthUnit")
                        .HasColumnName("Length_Unit")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Source");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<long?>("UserId");

                    b.Property<double?>("Weight");

                    b.Property<string>("WeightUnit")
                        .HasColumnName("Weight_Unit")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("Width");

                    b.Property<string>("WidthUnit")
                        .HasColumnName("Width_Unit")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkWmsDocumentBoxId")
                        .HasName("ix_wmsDocumentBoxInfo_FK_wmsDocumentBoxId");

                    b.ToTable("wmsDocumentBoxInfo");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentBoxLinks", b =>
                {
                    b.Property<long>("FkWmsDocumentId")
                        .HasColumnName("FK_WmsDocumentId");

                    b.Property<long>("FkWmsDocumentBoxId")
                        .HasColumnName("FK_WmsDocumentBoxId");

                    b.HasKey("FkWmsDocumentId", "FkWmsDocumentBoxId");

                    b.HasIndex("FkWmsDocumentBoxId");

                    b.HasIndex("FkWmsDocumentId", "FkWmsDocumentBoxId")
                        .HasName("ix_wmsDocumentBoxLinks_FK_WmsDocumentBoxId_includes");

                    b.ToTable("wmsDocumentBoxLinks");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentBoxMovements", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoxBarcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("BoxDocumentNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("BoxName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("BoxStatus");

                    b.Property<int?>("BoxType");

                    b.Property<string>("BoxWmsDocumentNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrentLocaitonBarcode")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CurrentLocationBranchCode")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("CurrentLocationId");

                    b.Property<string>("CurrentLocationName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("CurrentLocationStatus");

                    b.Property<int?>("CurrentLocationType");

                    b.Property<int>("Status");

                    b.Property<string>("ToParentLocationBarcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ToParentLocationBranchCode")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("ToParentLocationId");

                    b.Property<string>("ToParentLocationInstruction")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ToParentLocationInstructionColor")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ToParentLocationInstructionNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ToParentLocationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("ToParentLocationStatus");

                    b.Property<int?>("ToParentLocationType");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("wmsDocumentBoxMovements");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentBoxTracking", b =>
                {
                    b.Property<long>("FkWmsDocumentBoxId")
                        .HasColumnName("FK_wmsDocumentBoxId");

                    b.Property<long>("FkWmsTrackingId")
                        .HasColumnName("FK_wmsTrackingId");

                    b.HasKey("FkWmsDocumentBoxId", "FkWmsTrackingId");

                    b.HasIndex("FkWmsTrackingId")
                        .IsUnique()
                        .HasName("IX_wmsDocumentBoxTracking");

                    b.ToTable("wmsDocumentBoxTracking");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentImportStatus", b =>
                {
                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<short>("DocumentVersion");

                    b.Property<bool>("WmsImport")
                        .HasColumnName("WMS_Import");

                    b.Property<DateTime>("WmsImportDate")
                        .HasColumnName("WMS_ImportDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("WmsPickComplete")
                        .HasColumnName("WMS_PickComplete");

                    b.Property<DateTime?>("WmsPickCompleteDate")
                        .HasColumnName("WMS_PickCompleteDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("WmsPickStartDate")
                        .HasColumnName("WMS_PickStartDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("WmsPickStarted")
                        .HasColumnName("WMS_PickStarted");

                    b.HasKey("DocumentNumber", "DocumentVersion");

                    b.ToTable("WMS_DocumentImport_Status");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentLines", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkWmsDocumentId")
                        .HasColumnName("FK_wmsDocumentId");

                    b.Property<long?>("FkWmsDocumentMasterLineId")
                        .HasColumnName("FK_wmsDocumentMasterLineId");

                    b.Property<int>("Flags");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("PickedQuantity");

                    b.Property<int>("Quantity");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkWmsDocumentId");

                    b.HasIndex("FkWmsDocumentMasterLineId");

                    b.HasIndex("ItemCode", "PickedQuantity", "FkWmsDocumentId")
                        .HasName("ix_wmsDocumentLines_FK_wmsDocumentId_includes");

                    b.HasIndex("Id", "FkWmsDocumentId", "ItemCode", "Created", "PickedQuantity", "Quantity", "Type", "Status", "Flags", "FkWmsDocumentMasterLineId")
                        .HasName("ix_wmsDocumentLines_FK_wmsDocumentMasterLineId_includes");

                    b.ToTable("wmsDocumentLines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentLinks", b =>
                {
                    b.Property<long>("FkWmsDocumentParentId")
                        .HasColumnName("FK_WmsDocumentParentId");

                    b.Property<long>("FkWmsDocumentId")
                        .HasColumnName("FK_WmsDocumentId");

                    b.HasKey("FkWmsDocumentParentId", "FkWmsDocumentId");

                    b.HasIndex("FkWmsDocumentId")
                        .HasName("ix_WmsDocumentLinks_FK_WmsDocumentId");

                    b.ToTable("WmsDocumentLinks");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocuments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("DocumentType");

                    b.Property<Guid>("FkDocumentId")
                        .HasColumnName("FK_DocumentId");

                    b.Property<long?>("FkJobCardId")
                        .HasColumnName("FK_JobCardId");

                    b.Property<long?>("FkWmsDocumentParentId")
                        .HasColumnName("FK_WmsDocumentParentId");

                    b.Property<long>("Flags");

                    b.Property<Guid?>("Guid");

                    b.Property<string>("ParentDocumentNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<short>("Version");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .HasName("ix_wmsDocuments_Guid");

                    b.HasIndex("Id", "DocumentNumber", "Type")
                        .HasName("ix_wmsDocuments_DocumentNumber_Type_includes");

                    b.HasIndex("Version", "ParentDocumentNumber", "Type")
                        .HasName("IX_wmsDocuments_CurrentVersion");

                    b.HasIndex("Id", "FkDocumentId", "Status", "Flags", "Type")
                        .HasName("ix_wmsDocuments_Type_includes");

                    b.ToTable("wmsDocuments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentTracking", b =>
                {
                    b.Property<long>("FkWmsDocumentId")
                        .HasColumnName("FK_wmsDocumentId");

                    b.Property<long>("FkWmsTrackingId")
                        .HasColumnName("FK_wmsTrackingId");

                    b.HasKey("FkWmsDocumentId", "FkWmsTrackingId");

                    b.HasIndex("FkWmsTrackingId")
                        .IsUnique()
                        .HasName("IX_wmsDocumentTracking");

                    b.ToTable("wmsDocumentTracking");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsStagingLocations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FkLocationId")
                        .HasColumnName("FK_LocationId");

                    b.Property<int>("Flags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("wmsStagingLocations");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsStagingLocationSessionBoxes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FkWmsDocumentBoxId")
                        .HasColumnName("FK_wmsDocumentBoxId");

                    b.Property<long>("FkWmsStagingLocationSessionId")
                        .HasColumnName("FK_wmsStagingLocationSessionId");

                    b.Property<int>("Flags");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkWmsStagingLocationSessionId");

                    b.HasIndex("FkWmsDocumentBoxId", "FkWmsStagingLocationSessionId")
                        .IsUnique()
                        .HasName("IX_wmsStagingLocationSessionBoxes_1");

                    b.ToTable("wmsStagingLocationSessionBoxes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsStagingLocationSessions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long?>("FkFromLocationId")
                        .HasColumnName("FK_FromLocationId");

                    b.Property<long>("FkToParentLocationId")
                        .HasColumnName("FK_ToParentLocationId");

                    b.Property<long>("FkWmsStagingLocationId")
                        .HasColumnName("FK_wmsStagingLocationId");

                    b.Property<int>("Flags");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("FkWmsStagingLocationId");

                    b.ToTable("wmsStagingLocationSessions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsStagingLocationSessionTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("FkUserId")
                        .HasColumnName("FK_UserId");

                    b.Property<long?>("FkWmsStagingLocationSessionBoxId")
                        .HasColumnName("FK_wmsStagingLocationSessionBoxId");

                    b.Property<long>("FkWmsStagingLocationSessionId")
                        .HasColumnName("FK_wmsStagingLocationSessionId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkWmsStagingLocationSessionBoxId");

                    b.HasIndex("FkWmsStagingLocationSessionId");

                    b.ToTable("wmsStagingLocationSessionTracking");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long?>("FkUserId")
                        .HasColumnName("FK_UserId");

                    b.Property<string>("FkUserName")
                        .HasColumnName("FK_UserName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("wmsTracking");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountAddress", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Accounts", "FkAccount")
                        .WithMany("AccountAddress")
                        .HasForeignKey("FkAccountId")
                        .HasConstraintName("FK_AccountAddress_Accounts");

                    b.HasOne("Amtrack.Data_V2.Data.Addresses", "FkAddress")
                        .WithMany("AccountAddress")
                        .HasForeignKey("FkAddressId")
                        .HasConstraintName("FK_AccountAddress_Addresses");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountAttributes", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Accounts", "FkAccount")
                        .WithMany("AccountAttributes")
                        .HasForeignKey("FkAccountId")
                        .HasConstraintName("FK_AccountAttributes_Accounts");

                    b.HasOne("Amtrack.Data_V2.Data.AccountAttributeTemplates", "FkAttributeTemplate")
                        .WithMany("AccountAttributes")
                        .HasForeignKey("FkAttributeTemplateId")
                        .HasConstraintName("FK_AccountAttributes_AccountAttributeTemplates");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountContactAddress", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.AccountContacts", "FkAccountContact")
                        .WithMany("AccountContactAddress")
                        .HasForeignKey("FkAccountContactId")
                        .HasConstraintName("FK_AccountContactAddress_AccountContacts");

                    b.HasOne("Amtrack.Data_V2.Data.Addresses", "FkAddress")
                        .WithMany("AccountContactAddress")
                        .HasForeignKey("FkAddressId")
                        .HasConstraintName("FK_AccountContactAddress_Addresses");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountContactContactNumbers", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.AccountContacts", "FkAccountContact")
                        .WithMany("AccountContactContactNumbers")
                        .HasForeignKey("FkAccountContactId")
                        .HasConstraintName("FK_AccountContactContactNumbers_AccountContacts");

                    b.HasOne("Amtrack.Data_V2.Data.ContactNumbers", "FkContactNumber")
                        .WithMany("AccountContactContactNumbers")
                        .HasForeignKey("FkContactNumberId")
                        .HasConstraintName("FK_AccountContactContactNumbers_ContactNumbers");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountContactNotifications", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.AccountContacts", "FkAccountContact")
                        .WithMany("AccountContactNotifications")
                        .HasForeignKey("FkAccountContactId")
                        .HasConstraintName("FK_AccountContactNotifications_AccountContacts");

                    b.HasOne("Amtrack.Data_V2.Data.AccountSystemNotificationTypes", "FkNotification")
                        .WithMany("AccountContactNotifications")
                        .HasForeignKey("FkNotificationId")
                        .HasConstraintName("FK_AccountContactNotifications_AccountSystemNotificationTypes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountContactNumbers", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Accounts", "FkAccount")
                        .WithMany("AccountContactNumbers")
                        .HasForeignKey("FkAccountId")
                        .HasConstraintName("FK_AccountContactNumbers_Accounts");

                    b.HasOne("Amtrack.Data_V2.Data.ContactNumbers", "FkContactNumber")
                        .WithMany("AccountContactNumbers")
                        .HasForeignKey("FkContactNumberId")
                        .HasConstraintName("FK_AccountContactNumbers_ContactNumbers");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountContacts", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Accounts", "FkAccount")
                        .WithMany("AccountContacts")
                        .HasForeignKey("FkAccountId")
                        .HasConstraintName("FK_AccountContacts_Accounts");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AccountCreditLimitSettings", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Accounts", "FkAccount")
                        .WithOne("AccountCreditLimitSettings")
                        .HasForeignKey("Amtrack.Data_V2.Data.AccountCreditLimitSettings", "FkAccountId")
                        .HasConstraintName("FK_AccountCreditLimitSettings_Accounts");

                    b.HasOne("Amtrack.Data_V2.Data.CreditLimitSettings", "FkCreditLimitSettings")
                        .WithMany("AccountCreditLimitSettings")
                        .HasForeignKey("FkCreditLimitSettingsId")
                        .HasConstraintName("FK_AccountCreditLimitSettings_CreditLimitSettings");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Accounts", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.AccountBalances", "FkAccountBalance")
                        .WithMany("Accounts")
                        .HasForeignKey("FkAccountBalanceId")
                        .HasConstraintName("FK_Accounts_AccountBalances");

                    b.HasOne("Amtrack.Data_V2.Data.Users", "FkAccountManager")
                        .WithMany("Accounts")
                        .HasForeignKey("FkAccountManagerId")
                        .HasConstraintName("FK_Accounts_Users");

                    b.HasOne("Amtrack.Data_V2.Data.Accounts", "FkMasterAccount")
                        .WithMany("InverseFkMasterAccount")
                        .HasForeignKey("FkMasterAccountId")
                        .HasConstraintName("FK_Accounts_Accounts");

                    b.HasOne("Amtrack.Data_V2.Data.TaxRates", "FkTaxRate")
                        .WithMany("Accounts")
                        .HasForeignKey("FkTaxRateId")
                        .HasConstraintName("FK_Accounts_TaxRates");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlpMailerRecipients", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.AlpMailerUpdates", "FkMailer")
                        .WithMany("AlpMailerRecipients")
                        .HasForeignKey("FkMailerId")
                        .HasConstraintName("FK_alpMailerRecipients_alpMailerUpdates");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlppointRules", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Alps", "FkAlp")
                        .WithMany("AlppointRules")
                        .HasForeignKey("FkAlpid")
                        .HasConstraintName("FK_ALPPointsRules_ALPS");

                    b.HasOne("Amtrack.Data_V2.Data.AlppointRules", "FkAlppointRule")
                        .WithMany("InverseFkAlppointRule")
                        .HasForeignKey("FkAlppointRuleId")
                        .HasConstraintName("FK_ALPPointRules_ALPPointRules");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlppointRuleValues", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.AlppointRules", "FkAlppointsMultiplierRule")
                        .WithMany("AlppointRuleValues")
                        .HasForeignKey("FkAlppointsMultiplierRuleId")
                        .HasConstraintName("FK_ALPPointsMultiplierRuleValues_ALPPointsMultiplierRules");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AlppointsTypes", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Alps", "FkAlp")
                        .WithMany("AlppointsTypes")
                        .HasForeignKey("FkAlpid")
                        .HasConstraintName("FK_ALPPointsMultiplierTypes_ALPS");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Alptargets", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Alps", "FkAlp")
                        .WithMany("Alptargets")
                        .HasForeignKey("FkAlpid")
                        .HasConstraintName("FK_ALPTargets_ALPS");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ApiIntegratorImpersonations", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ApiIntegrator", "FkIntegrator")
                        .WithMany("ApiIntegratorImpersonations")
                        .HasForeignKey("FkIntegratorId")
                        .HasConstraintName("FK_sIntegratorInpersonations_sIntegrator");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ApiIntegratorPermissions", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ApiIntegrator", "FkIntegrator")
                        .WithMany("ApiIntegratorPermissions")
                        .HasForeignKey("FkIntegratorId")
                        .HasConstraintName("FK_sIntegratorPermissions_sIntegrator");

                    b.HasOne("Amtrack.Data_V2.Data.ApiPermissions", "FkPermission")
                        .WithMany("ApiIntegratorPermissions")
                        .HasForeignKey("FkPermissionId")
                        .HasConstraintName("FK_sIntegratorPermissions_sPermissions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ApiIntegratorRoles", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ApiIntegrator", "FkIntegrator")
                        .WithMany("ApiIntegratorRoles")
                        .HasForeignKey("FkIntegratorId")
                        .HasConstraintName("FK_sIntegratorRoles_sIntegrator");

                    b.HasOne("Amtrack.Data_V2.Data.ApiRoles", "FkRole")
                        .WithMany("ApiIntegratorRoles")
                        .HasForeignKey("FkRoleId")
                        .HasConstraintName("FK_sIntegratorRoles_sRoles");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ApiRolePermissions", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ApiPermissions", "FkPermission")
                        .WithMany("ApiRolePermissions")
                        .HasForeignKey("FkPermissionId")
                        .HasConstraintName("FK_sRolePermissions_sPermissions");

                    b.HasOne("Amtrack.Data_V2.Data.ApiRoles", "FkRole")
                        .WithMany("ApiRolePermissions")
                        .HasForeignKey("FkRoleId")
                        .HasConstraintName("FK_sRolePermissions_sRoles");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AsmDevice", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.AsmDeviceModels", "FkDeviceModel")
                        .WithMany("AsmDevice")
                        .HasForeignKey("FkDeviceModelId")
                        .HasConstraintName("FK_ASM_DeviceModelsASM_Device");

                    b.HasOne("Amtrack.Data_V2.Data.Users", "FkManager")
                        .WithMany("AsmDevice")
                        .HasForeignKey("FkManagerId")
                        .HasConstraintName("FK_UserASM_Device");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AsmDeviceModels", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.AsmDeviceManufacturer", "FkDeviceManufacturer")
                        .WithMany("AsmDeviceModels")
                        .HasForeignKey("FkDeviceManufacturerId")
                        .HasConstraintName("FK_ASM_DeviceManufacturerASM_DeviceModels");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AsmDeviceNotes", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.AsmDevice", "FkDevice")
                        .WithMany("AsmDeviceNotes")
                        .HasForeignKey("FkDeviceId")
                        .HasConstraintName("FK_ASM_DeviceASM_DeviceNotes");

                    b.HasOne("Amtrack.Data_V2.Data.HistoryContributor", "FkNoteCreatorNavigation")
                        .WithMany("AsmDeviceNotes")
                        .HasForeignKey("FkNoteCreator")
                        .HasConstraintName("FK_History_ContributorASM_DeviceNotes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.AsmDeviceOperators", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.AsmDevice", "FkDevice")
                        .WithMany("AsmDeviceOperators")
                        .HasForeignKey("FkDeviceId")
                        .HasConstraintName("FK_ASM_DeviceOperators_ASM_Device");

                    b.HasOne("Amtrack.Data_V2.Data.Users", "FkOperator")
                        .WithMany("AsmDeviceOperators")
                        .HasForeignKey("FkOperatorId")
                        .HasConstraintName("FK_ASM_DeviceOperators_User");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Baskets", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Baskets", "FkBasket")
                        .WithMany("InverseFkBasket")
                        .HasForeignKey("FkBasketId")
                        .HasConstraintName("FK_Baskets_Baskets");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BasketSessionItems", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.BasketSessions", "FkBasketSession")
                        .WithMany("BasketSessionItems")
                        .HasForeignKey("FkBasketSessionId")
                        .HasConstraintName("FK_BasketSessionBasketSessionItems");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BasketSessions", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Baskets", "FkBasket")
                        .WithMany("BasketSessions")
                        .HasForeignKey("FkBasketId")
                        .HasConstraintName("FK_BasketBasketSession");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BasketSessionTrackings", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.BasketSessions", "FkBasketSession")
                        .WithMany("BasketSessionTrackings")
                        .HasForeignKey("FkBasketSessionId")
                        .HasConstraintName("FK_BasketSessionBasketSessionTracking");

                    b.HasOne("Amtrack.Data_V2.Data.BasketSessionItems", "FkBasketSessionItem")
                        .WithMany("BasketSessionTrackings")
                        .HasForeignKey("FkBasketSessionItemId")
                        .HasConstraintName("FK_BasketSessionTrackings_BasketSessionItems");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchAddresses", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Addresses", "FkAddress")
                        .WithMany("BranchAddresses")
                        .HasForeignKey("FkAddressId")
                        .HasConstraintName("FK_BranchAddresses_Addresses");

                    b.HasOne("Amtrack.Data_V2.Data.Branches", "FkBranch")
                        .WithMany("BranchAddresses")
                        .HasForeignKey("FkBranchId")
                        .HasConstraintName("FK_BranchAddresses_Branches");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchAlps", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Alps", "FkAlp")
                        .WithMany("BranchAlps")
                        .HasForeignKey("FkAlpid")
                        .HasConstraintName("FK_BranchALPS_ALPS");

                    b.HasOne("Amtrack.Data_V2.Data.Branches", "FkBranch")
                        .WithMany("BranchAlps")
                        .HasForeignKey("FkBranchId")
                        .HasConstraintName("FK_BranchALPS_Branches");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchAttributes", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.BranchAttributeTemplates", "FkAttributeTemplate")
                        .WithMany("BranchAttributes")
                        .HasForeignKey("FkAttributeTemplateId")
                        .HasConstraintName("FK_branchAttributes_branchAttributeTemplates");

                    b.HasOne("Amtrack.Data_V2.Data.Branches", "FkBranch")
                        .WithMany("BranchAttributes")
                        .HasForeignKey("FkBranchId")
                        .HasConstraintName("FK_branchAttributes_Branches");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchAttributeTemplateOptionValues", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.BranchAttributeTemplates", "FkTemplate")
                        .WithMany("BranchAttributeTemplateOptionValues")
                        .HasForeignKey("FkTemplateId")
                        .HasConstraintName("FK_branchAttributeTemplateOptionValues_branchAttributeTemplates");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchContactNumbers", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Branches", "FkBranch")
                        .WithMany("BranchContactNumbers")
                        .HasForeignKey("FkBranchId")
                        .HasConstraintName("FK_BranchContactNumbers_Branches");

                    b.HasOne("Amtrack.Data_V2.Data.ContactNumbers", "FkContactNumbers")
                        .WithMany("BranchContactNumbers")
                        .HasForeignKey("FkContactNumbersId")
                        .HasConstraintName("FK_BranchContactNumbers_ContactNumbers");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchDeliveryCourierInfoes", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.BranchDelivery", "FkBranchDelivery")
                        .WithMany("BranchDeliveryCourierInfoes")
                        .HasForeignKey("FkBranchDeliveryId")
                        .HasConstraintName("FK_BranchDeliveryCourierInfoes_BranchDelivery");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchDeliveryParcels", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.BranchDelivery", "FkBranchDelivery")
                        .WithMany("BranchDeliveryParcels")
                        .HasForeignKey("FkBranchDeliveryId")
                        .HasConstraintName("FK_BranchDelivery_Parcels_BranchDelivery");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchDeliveryProcessTracking", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.BranchDeliveryProcesses", "FkBranchDeliveryProcess")
                        .WithMany("BranchDeliveryProcessTracking")
                        .HasForeignKey("FkBranchDeliveryProcessId")
                        .HasConstraintName("FK_BranchDeliveryProcessTracking_BranchDeliveryProcesses");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchDeliveryRequestResponses", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.BranchDeliveryRequests", "BranchDeliveryRequest")
                        .WithMany("BranchDeliveryRequestResponses")
                        .HasForeignKey("BranchDeliveryRequestId")
                        .HasConstraintName("FK_BranchDeliveryRequestBranchDeliveryRequestResponse");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Branches", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Currency", "FkCurrency")
                        .WithMany("Branches")
                        .HasForeignKey("FkCurrencyId")
                        .HasConstraintName("FK_Branches_Currency");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchInvoiceType", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Branches", "FkBranch")
                        .WithMany("BranchInvoiceTypeFkBranch")
                        .HasForeignKey("FkBranchId")
                        .HasConstraintName("FK_BranchInvoiceType_Branches");

                    b.HasOne("Amtrack.Data_V2.Data.Branches", "FkPrimaryBranch")
                        .WithMany("BranchInvoiceTypeFkPrimaryBranch")
                        .HasForeignKey("FkPrimaryBranchId")
                        .HasConstraintName("FK_BranchInvoiceType_PrimaryBranch");

                    b.HasOne("Amtrack.Data_V2.Data.BranchWarehouse", "FkPrimaryBranchWarehouse")
                        .WithMany("BranchInvoiceTypeFkPrimaryBranchWarehouse")
                        .HasForeignKey("FkPrimaryBranchWarehouseId")
                        .HasConstraintName("FK_BranchInvoiceType_PrimaryBranchWarehouse");

                    b.HasOne("Amtrack.Data_V2.Data.Branches", "FkSecondaryBranch")
                        .WithMany("BranchInvoiceTypeFkSecondaryBranch")
                        .HasForeignKey("FkSecondaryBranchId")
                        .HasConstraintName("FK_BranchInvoiceType_SecondaryBranch");

                    b.HasOne("Amtrack.Data_V2.Data.BranchWarehouse", "FkSecondaryBranchWarehouse")
                        .WithMany("BranchInvoiceTypeFkSecondaryBranchWarehouse")
                        .HasForeignKey("FkSecondaryBranchWarehouseId")
                        .HasConstraintName("FK_BranchInvoiceType_SecondaryBranchWarehouse");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchInvoiceTypeShipment", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.BranchInvoiceType", "FkBranchInvoiceType")
                        .WithMany("BranchInvoiceTypeShipment")
                        .HasForeignKey("FkBranchInvoiceTypeId")
                        .HasConstraintName("FK_BranchInvoiceTypeShipment_BranchInvoiceType");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchRules", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.BranchInvoiceType", "FkBranchInvoiceType")
                        .WithMany("BranchRules")
                        .HasForeignKey("FkBranchInvoiceTypeId")
                        .HasConstraintName("FK_BranchRules_BranchInvoiceType");

                    b.HasOne("Amtrack.Data_V2.Data.BranchInvoiceTypeShipment", "FkBranchInvoiceTypeShipment")
                        .WithMany("BranchRules")
                        .HasForeignKey("FkBranchInvoiceTypeShipmentId")
                        .HasConstraintName("FK_BranchRules_BranchInvoiceTypeShipment");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchRuleValues", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.BranchRules", "FkBranchRule")
                        .WithMany("BranchRuleValues")
                        .HasForeignKey("FkBranchRuleId")
                        .HasConstraintName("FK_BranchRuleValues_BranchRules");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchServers", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Branches", "FkBranch")
                        .WithMany("BranchServers")
                        .HasForeignKey("FkBranchId")
                        .HasConstraintName("FK_BranchServers_Branches");

                    b.HasOne("Amtrack.Data_V2.Data.ServerDetails", "FkServer")
                        .WithMany("BranchServers")
                        .HasForeignKey("FkServerId")
                        .HasConstraintName("FK_BranchServers_ServerDetails");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchSetting", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Branches", "FkBranch")
                        .WithMany("BranchSetting")
                        .HasForeignKey("FkBranchId")
                        .HasConstraintName("FK_BranchSetting_Branches");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchWarehouseLink", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Branches", "FkBranch")
                        .WithMany("BranchWarehouseLink")
                        .HasForeignKey("FkBranchId")
                        .HasConstraintName("FK_BranchWarehouseLink_Branches");

                    b.HasOne("Amtrack.Data_V2.Data.BranchWarehouse", "FkBranchWarehouse")
                        .WithMany("BranchWarehouseLink")
                        .HasForeignKey("FkBranchWarehouseId")
                        .HasConstraintName("FK_BranchWarehouseLink_BranchWarehouse");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BranchWifi", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Branches", "FkBranch")
                        .WithMany("BranchWifi")
                        .HasForeignKey("FkBranchId")
                        .HasConstraintName("FK_BranchWifi_Branches");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BrandingConversionGroups", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Users", "FkOwner")
                        .WithMany("BrandingConversionGroups")
                        .HasForeignKey("FkOwnerId")
                        .HasConstraintName("FK_BrandingConversionGroupOwners");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BrandingConversionMembers", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.BrandingConversionGroups", "FkGroup")
                        .WithMany("BrandingConversionMembers")
                        .HasForeignKey("FkGroupId")
                        .HasConstraintName("FK_BrandingConversionMembers_BrandingConversionGroups");

                    b.HasOne("Amtrack.Data_V2.Data.Users", "FkUser")
                        .WithMany("BrandingConversionMembers")
                        .HasForeignKey("FkUserId")
                        .HasConstraintName("FK_BrandingConversionMembers_Users");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BrandingInfoLine", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Lines", "FkLine")
                        .WithMany("BrandingInfoLine")
                        .HasForeignKey("FkLineId")
                        .HasConstraintName("FK_BrandingInfoLine_Lines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BrandingLineInfo", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Lines", "FkLine")
                        .WithMany("BrandingLineInfo")
                        .HasForeignKey("FkLineId")
                        .HasConstraintName("FK_BrandingLineInfo_Lines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BrandingLineInfoAttachments", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.BrandingLineInfo", "FkBrandingInfoLine")
                        .WithMany("BrandingLineInfoAttachments")
                        .HasForeignKey("FkBrandingInfoLineId")
                        .HasConstraintName("FK_BrandingLineInfoAttachments_BrandingLineInfo");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.BrandingLineInfoContacts", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.AccountContacts", "FkAccountContact")
                        .WithMany("BrandingLineInfoContacts")
                        .HasForeignKey("FkAccountContactId")
                        .HasConstraintName("FK_BrandingLineInfoContacts_AccountContacts");

                    b.HasOne("Amtrack.Data_V2.Data.BrandingLineInfo", "FkBrandingInfoLine")
                        .WithMany("BrandingLineInfoContacts")
                        .HasForeignKey("FkBrandingInfoLineId")
                        .HasConstraintName("FK_BrandingLineInfoContacts_BrandingLineInfo");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ClientDelivery", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ClientContact", "FkClientContact")
                        .WithOne("ClientDelivery")
                        .HasForeignKey("Amtrack.Data_V2.Data.ClientDelivery", "FkClientContactId")
                        .HasConstraintName("FK_ClientDelivery_ClientContact");

                    b.HasOne("Amtrack.Data_V2.Data.ClientDeliveryAddress", "FkClientDeliveryAddress")
                        .WithMany("ClientDelivery")
                        .HasForeignKey("FkClientDeliveryAddressId")
                        .HasConstraintName("FK_ClientDelivery_ClientDeliveryAddress");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ClientDocumentResponses", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ClientDocumentRequests", "ClientDocumentRequestClientRequest")
                        .WithMany("ClientDocumentResponses")
                        .HasForeignKey("ClientDocumentRequestClientRequestId")
                        .HasConstraintName("FK_ClientDocumentRequestClientDocumentResponse");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryProviderConfig", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DeliveryProvider", "FkDeliveryProvider")
                        .WithMany("DeliveryProviderConfig")
                        .HasForeignKey("FkDeliveryProviderId")
                        .HasConstraintName("FK_DeliveryProviderConfig_DeliveryProvider");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryProviderServiceExclusions", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DeliveryProvider", "FkDeliveryProvider")
                        .WithMany("DeliveryProviderServiceExclusions")
                        .HasForeignKey("FkDeliveryProviderId")
                        .HasConstraintName("FK_DeliveryProviderServiceExclusions_DeliveryProvider");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryProviderServiceLeadTimes", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DeliveryProvider", "FkDeliveryProvider")
                        .WithMany("DeliveryProviderServiceLeadTimes")
                        .HasForeignKey("FkDeliveryProviderId")
                        .HasConstraintName("FK__DeliveryP__FK_De__797EC228");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryProviderServices", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DeliveryProvider", "FkDeliveryProvider")
                        .WithMany("DeliveryProviderServices")
                        .HasForeignKey("FkDeliveryProviderId")
                        .HasConstraintName("FK_DeliveryProviderServices_DeliveryProvider");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryQuote", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DeliveryProvider", "FkDeliveryProvider")
                        .WithMany("DeliveryQuote")
                        .HasForeignKey("FkDeliveryProviderId")
                        .HasConstraintName("FK_DeliveryQuote_DeliveryProvider");

                    b.HasOne("Amtrack.Data_V2.Data.DeliveryAddress", "FkDeliveryQuoteAddress")
                        .WithMany("DeliveryQuote")
                        .HasForeignKey("FkDeliveryQuoteAddressId")
                        .HasConstraintName("FK_DeliveryQuote_DeliveryAddress");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryQuoteDetail", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DeliveryQuote", "FkDeliveryQuote")
                        .WithMany("DeliveryQuoteDetail")
                        .HasForeignKey("FkDeliveryQuoteId")
                        .HasConstraintName("FK_DeliveryQuoteDetail_DeliveryQuote");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryQuoteDocuments", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DeliveryQuote", "FkDeliveryQuote")
                        .WithMany("DeliveryQuoteDocuments")
                        .HasForeignKey("FkDeliveryQuoteId")
                        .HasConstraintName("FK_DeliveryQuoteDocuments_DeliveryQuote");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryQuoteItems", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DeliveryQuote", "FkDeliveryQuote")
                        .WithMany("DeliveryQuoteItems")
                        .HasForeignKey("FkDeliveryQuoteId")
                        .HasConstraintName("FK_DeliveryQuoteItems_DeliveryQuote");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliverySuburbLookup", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DeliveryProvider", "FkProvider")
                        .WithMany("DeliverySuburbLookup")
                        .HasForeignKey("FkProviderId")
                        .HasConstraintName("FK_DeliverySuburbLookup_DeliveryProvider");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryWaybill", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.AccountContacts", "FkAccountContact")
                        .WithMany("DeliveryWaybill")
                        .HasForeignKey("FkAccountContactId")
                        .HasConstraintName("FK_DeliveryWaybill_AccountContacts");

                    b.HasOne("Amtrack.Data_V2.Data.DeliveryProvider", "FkDeliveryProvider")
                        .WithMany("DeliveryWaybill")
                        .HasForeignKey("FkDeliveryProviderId")
                        .HasConstraintName("FK_DeliveryWaybill_DeliveryProvider");

                    b.HasOne("Amtrack.Data_V2.Data.DeliveryAddress", "FkDeliveryWaybillAddress")
                        .WithMany("DeliveryWaybill")
                        .HasForeignKey("FkDeliveryWaybillAddressId")
                        .HasConstraintName("FK_DeliveryWaybill_DeliveryWaybillAddress");

                    b.HasOne("Amtrack.Data_V2.Data.Documents", "FkDocument")
                        .WithMany("DeliveryWaybill")
                        .HasForeignKey("FkDocumentId")
                        .HasConstraintName("FK_DeliveryWaybill_Documents");

                    b.HasOne("Amtrack.Data_V2.Data.DeliveryWaybill", "FkHistory")
                        .WithMany("InverseFkHistory")
                        .HasForeignKey("FkHistoryId")
                        .HasConstraintName("FK_DeliveryWaybill_DeliveryWaybill");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryWaybillDetail", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DeliveryWaybill", "FkDeliveryWaybill")
                        .WithMany("DeliveryWaybillDetail")
                        .HasForeignKey("FkDeliveryWaybillId")
                        .HasConstraintName("FK_DeliveryWaybillDetail_DeliveryWaybill");

                    b.HasOne("Amtrack.Data_V2.Data.Documents", "FkDocument")
                        .WithMany("DeliveryWaybillDetail")
                        .HasForeignKey("FkDocumentId")
                        .HasConstraintName("FK_DeliveryWaybillDetail_Documents");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DeliveryWaybillTracking", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DeliveryWaybill", "FkDeliveryWaybill")
                        .WithMany("DeliveryWaybillTracking")
                        .HasForeignKey("FkDeliveryWaybillId")
                        .HasConstraintName("FK_DeliveryWaybillTracking_DeliveryWaybill");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DmDeviceHandler", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DmDevice", "FkDevice")
                        .WithMany("DmDeviceHandler")
                        .HasForeignKey("FkDeviceId")
                        .HasConstraintName("FK_dmDeviceHandler_dmDevice");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DmDeviceLogBook", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DmDevice", "FkDevice")
                        .WithMany("DmDeviceLogBook")
                        .HasForeignKey("FkDeviceId")
                        .HasConstraintName("FK_dmDeviceLogBook_dmDevice");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DmDeviceRotation", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DmDevice", "FkDevice")
                        .WithMany("DmDeviceRotation")
                        .HasForeignKey("FkDeviceId")
                        .HasConstraintName("FK_dmDeviceRotation_dmDevice");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DmDeviceTracking", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DmDevice", "FkDevice")
                        .WithMany("DmDeviceTracking")
                        .HasForeignKey("FkDeviceId")
                        .HasConstraintName("FK_dmDeviceTracking_dmDevice");

                    b.HasOne("Amtrack.Data_V2.Data.DmDeviceTracking", "IdNavigation")
                        .WithOne("InverseIdNavigation")
                        .HasForeignKey("Amtrack.Data_V2.Data.DmDeviceTracking", "Id")
                        .HasConstraintName("FK_dmDeviceTracking_dmDeviceTracking");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentBoxDetail", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DocumentBoxes", "FkDocumentBox")
                        .WithMany("DocumentBoxDetail")
                        .HasForeignKey("FkDocumentBoxId")
                        .HasConstraintName("FK_DocumentBoxDetail_DocumentBoxes");

                    b.HasOne("Amtrack.Data_V2.Data.Lines", "FkDocumentLine")
                        .WithOne("DocumentBoxDetail")
                        .HasForeignKey("Amtrack.Data_V2.Data.DocumentBoxDetail", "FkDocumentLineId")
                        .HasConstraintName("FK_DocumentBoxDetail_Lines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentBoxes", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Documents", "FkDocument")
                        .WithMany("DocumentBoxes")
                        .HasForeignKey("FkDocumentId")
                        .HasConstraintName("FK_DocumentBoxes_Documents");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentHistory", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.HistoryContributor", "FkHistoryContributor")
                        .WithMany("DocumentHistory")
                        .HasForeignKey("FkHistoryContributorId")
                        .HasConstraintName("FK_History_ContributorDocument_History");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentPallet", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Documents", "DocumentsDocument")
                        .WithMany("DocumentPallet")
                        .HasForeignKey("DocumentsDocumentId")
                        .HasConstraintName("FK_DocumentPallet_Document");

                    b.HasOne("Amtrack.Data_V2.Data.Pallets", "PalletsPallet")
                        .WithMany("DocumentPallet")
                        .HasForeignKey("PalletsPalletId")
                        .HasConstraintName("FK_DocumentPallet_Pallet");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.DocumentPostProcessingInfoes", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.DocumentPostProcessing", "FkProcessing")
                        .WithMany("DocumentPostProcessingInfoes")
                        .HasForeignKey("FkProcessingId")
                        .HasConstraintName("FK_DocumentPostProcessingInfoes_DocumentPostProcessing");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.EntityAttachmentLinks", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.EntityAttachments", "FkAttachment")
                        .WithMany("EntityAttachmentLinks")
                        .HasForeignKey("FkAttachmentId")
                        .HasConstraintName("FK_EntityAttachmentsEntityAttachmentLink");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.EntityNotificationRecipients", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.EntityNotifications", "FkNotification")
                        .WithMany("EntityNotificationRecipients")
                        .HasForeignKey("FkNotificationId")
                        .HasConstraintName("FK_EntityNotificationsEntityNotificationRecipient");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.LineDatas", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Lines", "FkLine")
                        .WithOne("LineDatas")
                        .HasForeignKey("Amtrack.Data_V2.Data.LineDatas", "FkLineId")
                        .HasConstraintName("FK_LineLineData");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.LineDisplay", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Documents", "Document")
                        .WithMany("LineDisplay")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_LineDisplay_DocumentDetail");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.LineDisplayComponents", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.LineDisplay", "FkDisplayLine")
                        .WithMany("LineDisplayComponents")
                        .HasForeignKey("FkDisplayLineId")
                        .HasConstraintName("FK_LineDisplayComponents_LineDisplay1");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.LineDisplayPartDetails", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.LineDisplay", "FkDisplayLine")
                        .WithMany("LineDisplayPartDetails")
                        .HasForeignKey("FkDisplayLineId")
                        .HasConstraintName("FK_LineDisplayPartDetails_LineDisplay");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.LineLinks", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.LineDisplay", "FkDisplayLine")
                        .WithMany("LineLinks")
                        .HasForeignKey("FkDisplayLineId")
                        .HasConstraintName("FK_LineLinks_LineDisplay");

                    b.HasOne("Amtrack.Data_V2.Data.Lines", "FkLine")
                        .WithMany("LineLinks")
                        .HasForeignKey("FkLineId")
                        .HasConstraintName("FK_LineLinks_Lines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Lines", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Documents", "Document")
                        .WithMany("Lines")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_DocumentDetail");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.MDocuments", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.MMessage", "FkMessageNavigation")
                        .WithOne("MDocuments")
                        .HasForeignKey("Amtrack.Data_V2.Data.MDocuments", "FkMessage")
                        .HasConstraintName("FK_M_Documents_M_Message1");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.MRecipientResponses", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.MStore", "FkStoreNavigation")
                        .WithMany("MRecipientResponses")
                        .HasForeignKey("FkStore")
                        .HasConstraintName("FK_M_RecipientResponses_M_Store1");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.MRecipients", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.MMessage", "FkMessageNavigation")
                        .WithMany("MRecipients")
                        .HasForeignKey("FkMessage")
                        .HasConstraintName("FK_M_Recipients_M_Message");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.MSchedules", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.MMessage", "FkMessageNavigation")
                        .WithOne("MSchedules")
                        .HasForeignKey("Amtrack.Data_V2.Data.MSchedules", "FkMessage")
                        .HasConstraintName("FK_M_Schedules_M_Message1");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.MStore", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.MMessage", "FkMessageNavigation")
                        .WithMany("MStore")
                        .HasForeignKey("FkMessage")
                        .HasConstraintName("FK_M_Store_M_Message");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.OneTimeTokens", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Users", "FkUser")
                        .WithMany("OneTimeTokens")
                        .HasForeignKey("FkUserId")
                        .HasConstraintName("FK_UserOneTimeToken");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PalletConfirmLocationBatches", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Warehouses", "FkWarehouse")
                        .WithMany("PalletConfirmLocationBatches")
                        .HasForeignKey("FkWarehouseId")
                        .HasConstraintName("FK_WarehousePalletConfirmLocationBatch");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PalletConfirmLocationExceptions", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Pallets", "FkPallet")
                        .WithMany("PalletConfirmLocationExceptions")
                        .HasForeignKey("FkPalletId")
                        .HasConstraintName("FK_PalletPalletConfirmLocationException");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PalletConfirmLocationMovements", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Pallets", "FkPallet")
                        .WithMany("PalletConfirmLocationMovements")
                        .HasForeignKey("FkPalletId")
                        .HasConstraintName("FK_PalletPalletConfirmLocationMovement");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PalletConfirmLocationRaw", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PalletConfirmLocationBatches", "FkBatch")
                        .WithMany("PalletConfirmLocationRaw")
                        .HasForeignKey("FkBatchId")
                        .HasConstraintName("FK_PalletConfirmLocationBatchPalletConfirmLocation_Raw");

                    b.HasOne("Amtrack.Data_V2.Data.HistoryContributor", "FkScannedBy")
                        .WithMany("PalletConfirmLocationRaw")
                        .HasForeignKey("FkScannedById")
                        .HasConstraintName("FK_History_ContributorPalletConfirmLocation_Raw");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PalletContents", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Pallets", "Pallet")
                        .WithMany("PalletContents")
                        .HasForeignKey("PalletId")
                        .HasConstraintName("FK_PalletPalletContent");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Pallets", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Warehouses", "FkWarehouse")
                        .WithMany("Pallets")
                        .HasForeignKey("FkWarehouseId")
                        .HasConstraintName("FK_WarehousePallet");

                    b.HasOne("Amtrack.Data_V2.Data.WarehouseLocations", "WarehouseLocatonWarehouseLocation")
                        .WithMany("Pallets")
                        .HasForeignKey("WarehouseLocatonWarehouseLocationId")
                        .HasConstraintName("FK_PalletWarehouseLocaton");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PalletTransferBatchContents", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PalletTransferBatches", "FkPalletTransferBatch")
                        .WithMany("PalletTransferBatchContents")
                        .HasForeignKey("FkPalletTransferBatchId")
                        .HasConstraintName("FK_PalletTransferBatchPalletTransferBatchContent");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PaymentInfoData", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PaymentInfoes", "FkPayment")
                        .WithMany("PaymentInfoData")
                        .HasForeignKey("FkPaymentId")
                        .HasConstraintName("FK_PaymentInfoData_PaymentInfoes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PaymentInfoProcessResults", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PaymentInfoes", "FkPayment")
                        .WithMany("PaymentInfoProcessResults")
                        .HasForeignKey("FkPaymentId")
                        .HasConstraintName("FK_PaymentInfoProcessResults_PaymentInfoes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PickingInstructions", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PickingSlips", "FkPickingSlip")
                        .WithMany("PickingInstructions")
                        .HasForeignKey("FkPickingSlipId")
                        .HasConstraintName("FK_PickingSlipPickingInstruction");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PickingSlipMovements", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.HistoryContributor", "FkActioner")
                        .WithMany("PickingSlipMovementsFkActioner")
                        .HasForeignKey("FkActionerId")
                        .HasConstraintName("FK_PickingSlipMovementActioner");

                    b.HasOne("Amtrack.Data_V2.Data.PickingSlips", "FkPickingSlip")
                        .WithMany("PickingSlipMovements")
                        .HasForeignKey("FkPickingSlipId")
                        .HasConstraintName("FK_PickingSlipPickingSlipMovement");

                    b.HasOne("Amtrack.Data_V2.Data.HistoryContributor", "FkReceiver")
                        .WithMany("PickingSlipMovementsFkReceiver")
                        .HasForeignKey("FkReceiverId")
                        .HasConstraintName("FK_PickingSlipMovementReceivers");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PickingSlipPrintStatus", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PrintDelayedReasons", "PrintDelayReasonCodeNavigation")
                        .WithMany("PickingSlipPrintStatus")
                        .HasForeignKey("PrintDelayReasonCode")
                        .HasConstraintName("FK_PickingSlipPrintStatusPrintDelayedReason");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PickingSlipReservedStocks", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PickingSlips", "FkPickingSlip")
                        .WithMany("PickingSlipReservedStocks")
                        .HasForeignKey("FkPickingSlipId")
                        .HasConstraintName("FK_PickingSlipPickingSlipReservedStock");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PickingSlips", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Documents", "DocumentDocument")
                        .WithMany("PickingSlips")
                        .HasForeignKey("DocumentDocumentId")
                        .HasConstraintName("FK_DocumentPickingSlip");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodCollectionInstructionContainer", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PodCollectionIntruction", "FkInstruction")
                        .WithMany("PodCollectionInstructionContainer")
                        .HasForeignKey("FkInstructionId")
                        .HasConstraintName("FK_podCollectionInstructionContainer_podCollectionIntruction");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodCollectionInstructionLocation", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PodCollectionIntruction", "FkInstruction")
                        .WithMany("PodCollectionInstructionLocation")
                        .HasForeignKey("FkInstructionId")
                        .HasConstraintName("FK_podCollectionInstructionLocation_podCollectionIntruction");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodCollectionIntruction", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PodCollectionIntruction", "FkParentIntruction")
                        .WithMany("InverseFkParentIntruction")
                        .HasForeignKey("FkParentIntructionId")
                        .HasConstraintName("FK_podCollectionIntruction_podCollectionIntruction");

                    b.HasOne("Amtrack.Data_V2.Data.PodCollectionNote", "FkPodCollectionNote")
                        .WithMany("PodCollectionIntruction")
                        .HasForeignKey("FkPodCollectionNoteId")
                        .HasConstraintName("FK_podCollectionIntruction_podCollectionNote");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodCollectionNote", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Users", "FkCollectionClerkNavigation")
                        .WithMany("PodCollectionNote")
                        .HasForeignKey("FkCollectionClerk")
                        .HasConstraintName("FK_podCollectionNote_Users");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodCollectionNoteBoxInfo", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PodCollectionNote", "FkPodCollectionNote")
                        .WithMany("PodCollectionNoteBoxInfo")
                        .HasForeignKey("FkPodCollectionNoteId")
                        .HasConstraintName("FK_podCollectionNoteBoxInfo_podCollectionNote");

                    b.HasOne("Amtrack.Data_V2.Data.WmsDocumentBoxes", "FkWmsDocumentBox")
                        .WithMany("PodCollectionNoteBoxInfo")
                        .HasForeignKey("FkWmsDocumentBoxId")
                        .HasConstraintName("FK_podCollectionNoteBoxInfo_wmsDocumentBoxes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodCollectionNoteDocument", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PodCollectionNote", "FkPodCollectionNote")
                        .WithMany("PodCollectionNoteDocument")
                        .HasForeignKey("FkPodCollectionNoteId")
                        .HasConstraintName("FK_podCollectionNoteDocument_podCollectionNote");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodCollectionNoteWaybill", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PodCollectionNote", "FkPodCollectionNote")
                        .WithMany("PodCollectionNoteWaybill")
                        .HasForeignKey("FkPodCollectionNoteId")
                        .HasConstraintName("FK_PodCollectionNoteWaybill_podCollectionNote");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodDispatchBuzzerAllocation", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PodDispatchBuzzer", "FkBuzzer")
                        .WithMany("PodDispatchBuzzerAllocation")
                        .HasForeignKey("FkBuzzerId")
                        .HasConstraintName("FK_DispatchBuzzerAllocation_DispatchBuzzer");

                    b.HasOne("Amtrack.Data_V2.Data.PodCollectionNote", "FkPodCollectionNote")
                        .WithMany("PodDispatchBuzzerAllocation")
                        .HasForeignKey("FkPodCollectionNoteId")
                        .HasConstraintName("FK_podDispatchBuzzerAllocation_podCollectionNote");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.PodDispatchBuzzerAllocationTracking", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.PodDispatchBuzzerAllocation", "FkBuzzerAllocation")
                        .WithMany("PodDispatchBuzzerAllocationTracking")
                        .HasForeignKey("FkBuzzerAllocationId")
                        .HasConstraintName("FK_podDispatchBuzzerAllocationTracking_podDispatchBuzzerAllocation1");

                    b.HasOne("Amtrack.Data_V2.Data.Users", "FkUser")
                        .WithMany("PodDispatchBuzzerAllocationTracking")
                        .HasForeignKey("FkUserId")
                        .HasConstraintName("FK_podDispatchBuzzerAllocationTracking_Users");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Printers", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Branches", "FkBranch")
                        .WithMany("Printers")
                        .HasForeignKey("FkBranchId")
                        .HasConstraintName("FK_Printers_Branches");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkBoxes", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Rework", "FkRework")
                        .WithMany("ReworkBoxes")
                        .HasForeignKey("FkReworkId")
                        .HasConstraintName("FK_ReworkBoxes_Rework");

                    b.HasOne("Amtrack.Data_V2.Data.WmsDocumentBoxes", "FkWmsDocucmentBox")
                        .WithMany("ReworkBoxes")
                        .HasForeignKey("FkWmsDocucmentBoxId")
                        .HasConstraintName("FK_ReworkBoxes_wmsDocumentBoxes1");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkDocuments", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Rework", "FkRework")
                        .WithMany("ReworkDocuments")
                        .HasForeignKey("FkReworkId")
                        .HasConstraintName("FK_ReworkDocuments_Rework");

                    b.HasOne("Amtrack.Data_V2.Data.WmsDocuments", "FkWmsDocument")
                        .WithMany("ReworkDocuments")
                        .HasForeignKey("FkWmsDocumentId")
                        .HasConstraintName("FK_ReworkDocuments_wmsDocuments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkInstructionBoxes", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ReworkInstructionMasterBoxes", "FkReworkInstructionMasterBox")
                        .WithMany("ReworkInstructionBoxes")
                        .HasForeignKey("FkReworkInstructionMasterBoxId")
                        .HasConstraintName("FK_ReworkInstructionBoxes_ReworkInstructionMasterBoxes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkInstructionData", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ReworkInstructions", "FkReworkInstruction")
                        .WithMany("ReworkInstructionData")
                        .HasForeignKey("FkReworkInstructionId")
                        .HasConstraintName("FK_ReworkInstructionData_ReworkInstruction");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkInstructionLines", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ReworkInstructionMasterLines", "FkReworkInstructionMasterLine")
                        .WithMany("ReworkInstructionLines")
                        .HasForeignKey("FkReworkInstructionMasterLineId")
                        .HasConstraintName("FK_ReworkInstructionLines_ReworkInstructionMasterLines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkInstructionMasterBoxes", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ReworkInstructions", "FkReworkInstruction")
                        .WithMany("ReworkInstructionMasterBoxes")
                        .HasForeignKey("FkReworkInstructionId")
                        .HasConstraintName("FK_ReworkInstructionMasterBoxes_ReworkInstructions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkInstructionMasterLines", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ReworkInstructions", "FkReworkInstruction")
                        .WithMany("ReworkInstructionMasterLines")
                        .HasForeignKey("FkReworkInstructionId")
                        .HasConstraintName("FK_ReworkInstructionMasterLines_ReworkInstructions");

                    b.HasOne("Amtrack.Data_V2.Data.ReworkInstructionMasterBoxes", "FkReworkInstructionMasterBox")
                        .WithMany("ReworkInstructionMasterLines")
                        .HasForeignKey("FkReworkInstructionMasterBoxId")
                        .HasConstraintName("FK_ReworkInstructionMasterLines_ReworkInstructionMasterBoxes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ReworkInstructions", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Rework", "FkRework")
                        .WithMany("ReworkInstructions")
                        .HasForeignKey("FkReworkId")
                        .HasConstraintName("FK_ReworkInstructions_Rework");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SecurityLevelSecurityPermission", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.SecurityLevels", "SecurityLevelsSecurityLevel")
                        .WithMany("SecurityLevelSecurityPermission")
                        .HasForeignKey("SecurityLevelsSecurityLevelId")
                        .HasConstraintName("FK_SecurityLevelSecurityPermission_SecurityLevel");

                    b.HasOne("Amtrack.Data_V2.Data.SecurityPermissions", "SecurityPermissionsSecurityPermission")
                        .WithMany("SecurityLevelSecurityPermission")
                        .HasForeignKey("SecurityPermissionsSecurityPermissionId")
                        .HasConstraintName("FK_SecurityLevelSecurityPermission_SecurityPermission");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShipmentCommercialBrandingDocumentLines", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.CommercialBrandingDocuments", "FkCommerBrandingDocument")
                        .WithMany("ShipmentCommercialBrandingDocumentLines")
                        .HasForeignKey("FkCommerBrandingDocumentId")
                        .HasConstraintName("FK_ShipmentCommercialBrandingDocumentLines_CommercialBrandingDocument");

                    b.HasOne("Amtrack.Data_V2.Data.ShipmentCommercialBrandingDocuments", "FkShipmentCommercialBrandingDocument")
                        .WithMany("ShipmentCommercialBrandingDocumentLines")
                        .HasForeignKey("FkShipmentCommercialBrandingDocumentId")
                        .HasConstraintName("FK_ShipmentCommercialBrandingDocumentLines_ShipmentCommercialBrandingDocuments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShipmentCommercialBrandingDocuments", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.CommercialBrandingDocuments", "FkCommerBrandingDocument")
                        .WithMany("ShipmentCommercialBrandingDocuments")
                        .HasForeignKey("FkCommerBrandingDocumentId")
                        .HasConstraintName("FK_ShipmentCommercialBrandingDocuments_CommercialBrandingDocument");

                    b.HasOne("Amtrack.Data_V2.Data.Shipments", "FkShipment")
                        .WithMany("ShipmentCommercialBrandingDocuments")
                        .HasForeignKey("FkShipmentId")
                        .HasConstraintName("FK_ShipmentCommercialBrandingDocuments_Shipments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShipmentDetail", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Shipments", "FkShipment")
                        .WithMany("ShipmentDetail")
                        .HasForeignKey("FkShipmentId")
                        .HasConstraintName("FK_ShipmentDetail_Shipments");

                    b.HasOne("Amtrack.Data_V2.Data.WmsDocumentBoxes", "FkWmsDocumentBox")
                        .WithMany("ShipmentDetail")
                        .HasForeignKey("FkWmsDocumentBoxId")
                        .HasConstraintName("FK_ShipmentDetail_wmsDocumentBoxes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShipmentProcessTracking", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Shipments", "FkShipment")
                        .WithMany("ShipmentProcessTracking")
                        .HasForeignKey("FkShipmentId")
                        .HasConstraintName("FK_ShipmentProcessTracking_Shipments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShipmentReservesRecycle", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Shipments", "FkShipment")
                        .WithMany("ShipmentReservesRecycle")
                        .HasForeignKey("FkShipmentId")
                        .HasConstraintName("FK_ShipmentReservesRecycle_Shipments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShippingDestinations", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ShippingServices", "FkShippingService")
                        .WithMany("ShippingDestinations")
                        .HasForeignKey("FkShippingServiceId")
                        .HasConstraintName("FK_ShippingServiceShippingDestination");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShippingProviderConfigurations", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ShippingProviders", "FkShippingProvider")
                        .WithMany("ShippingProviderConfigurations")
                        .HasForeignKey("FkShippingProviderId")
                        .HasConstraintName("FK_ShippingProviderShippingProviderConfiguration");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShippingRates", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ShippingDestinations", "FkShippingDestination")
                        .WithMany("ShippingRates")
                        .HasForeignKey("FkShippingDestinationId")
                        .HasConstraintName("FK_ShippingDestinationShippingRate");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.ShippingServices", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.ShippingProviders", "FkShippingProvider")
                        .WithMany("ShippingServices")
                        .HasForeignKey("FkShippingProviderId")
                        .HasConstraintName("FK_ShippingProviderShippingService");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SrReceiptCompletedLines", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.SrReceipts", "FkReceipt")
                        .WithMany("SrReceiptCompletedLines")
                        .HasForeignKey("FkReceiptId")
                        .HasConstraintName("FK_SR_ReceiptCompletedLines_SR_Receipt");

                    b.HasOne("Amtrack.Data_V2.Data.SrReceiptLines", "FkSrReceiptLine")
                        .WithMany("SrReceiptCompletedLines")
                        .HasForeignKey("FkSrReceiptLineId")
                        .HasConstraintName("FK_SR_ReceiptCompletedLines_SR_ReceiptLines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SrReceiptLines", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.SrReceipts", "FkReceipt")
                        .WithMany("SrReceiptLines")
                        .HasForeignKey("FkReceiptId")
                        .HasConstraintName("FK_SR_ReceiptLines_SR_Receipt");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SrReceiptTracking", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.SrReceipts", "FkSrReceipt")
                        .WithMany("SrReceiptTracking")
                        .HasForeignKey("FkSrReceiptId")
                        .HasConstraintName("FK_SR_ReceiptTracking_SR_Receipt");

                    b.HasOne("Amtrack.Data_V2.Data.SrReceiptLines", "FkSrReceiptLine")
                        .WithMany("SrReceiptTracking")
                        .HasForeignKey("FkSrReceiptLineId")
                        .HasConstraintName("FK_SR_ReceiptTracking_SR_ReceiptLines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.StockTakeRecords", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.StockTakeBatches", "FkStockTakeBatch")
                        .WithMany("StockTakeRecords")
                        .HasForeignKey("FkStockTakeBatchId")
                        .HasConstraintName("FK_StockTakeBatchStockTakeRecord");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.StockTakeUnProcessedBatchEntries", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.StockTakeBatches", "FkStockTakeBatch")
                        .WithMany("StockTakeUnProcessedBatchEntries")
                        .HasForeignKey("FkStockTakeBatchId")
                        .HasConstraintName("FK_StockTakeBatchStockTakeUnProcessedBatchEntry");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SuggestedReOrderPallets", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Pallets", "Pallet")
                        .WithMany("SuggestedReOrderPallets")
                        .HasForeignKey("PalletId")
                        .HasConstraintName("FK_PalletSuggestedReOrderPallet");

                    b.HasOne("Amtrack.Data_V2.Data.WarehouseReorders", "WarehouseReOrder")
                        .WithMany("SuggestedReOrderPallets")
                        .HasForeignKey("WarehouseReOrderId")
                        .HasConstraintName("FK_WarehouseReorderSuggestedReOrderPallet");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SyncDataErrorDetail", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.SyncDataErrors", "FkSyncDataError")
                        .WithMany("SyncDataErrorDetail")
                        .HasForeignKey("FkSyncDataErrorId")
                        .HasConstraintName("FK_SyncDataErrorDetail_SyncDataErrors");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.SyncDataErrorRecipients", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.SyncDataErrors", "FkSyncDataError")
                        .WithMany("SyncDataErrorRecipients")
                        .HasForeignKey("FkSyncDataErrorId")
                        .HasConstraintName("FK_SyncDataErrorRecipients_SyncDataErrors");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.UserBranches", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Branches", "FkBranch")
                        .WithMany("UserBranches")
                        .HasForeignKey("FkBranchId")
                        .HasConstraintName("FK_UserBranches_Branches");

                    b.HasOne("Amtrack.Data_V2.Data.Users", "FkUser")
                        .WithMany("UserBranches")
                        .HasForeignKey("FkUserId")
                        .HasConstraintName("FK_UserBranches_Users");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.UserDepartment", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Departments", "DepartmentsDepartment")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentsDepartmentId")
                        .HasConstraintName("FK_UserDepartment_Department");

                    b.HasOne("Amtrack.Data_V2.Data.Users", "UsersUser")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UsersUserId")
                        .HasConstraintName("FK_UserDepartment_User");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.Users", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.SecurityLevels", "SecurityLevelSecurityLevel")
                        .WithMany("Users")
                        .HasForeignKey("SecurityLevelSecurityLevelId")
                        .HasConstraintName("FK_UserSecurityLevel");

                    b.HasOne("Amtrack.Data_V2.Data.Users", "UserUser")
                        .WithMany("InverseUserUser")
                        .HasForeignKey("UserUserId")
                        .HasConstraintName("FK_UserUser");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.UserSecurityPermission", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.SecurityPermissions", "SecurityPermissionsSecurityPermission")
                        .WithMany("UserSecurityPermission")
                        .HasForeignKey("SecurityPermissionsSecurityPermissionId")
                        .HasConstraintName("FK_UserSecurityPermission_SecurityPermission");

                    b.HasOne("Amtrack.Data_V2.Data.Users", "UsersUser")
                        .WithMany("UserSecurityPermission")
                        .HasForeignKey("UsersUserId")
                        .HasConstraintName("FK_UserSecurityPermission_User");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WarehouseLocations", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Warehouses", "WarehouseWarehouse")
                        .WithMany("WarehouseLocations")
                        .HasForeignKey("WarehouseWarehouseId")
                        .HasConstraintName("FK_WarehouseWarehouseLocaton");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WarehouseNotifications", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Warehouses", "Warehouse")
                        .WithMany("WarehouseNotifications")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("FK_WarehouseNotificationRecipients");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WarehouseStockStorageMovements", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.HistoryContributor", "FkHistory")
                        .WithMany("WarehouseStockStorageMovements")
                        .HasForeignKey("FkHistoryId")
                        .HasConstraintName("FK_History_ContributorWarehouseStockStorageMovement");

                    b.HasOne("Amtrack.Data_V2.Data.Pallets", "FkPallet")
                        .WithMany("WarehouseStockStorageMovements")
                        .HasForeignKey("FkPalletId")
                        .HasConstraintName("FK_PalletWarehouseStockStorageMovement");

                    b.HasOne("Amtrack.Data_V2.Data.WarehouseStockStorages", "FkStockStorage")
                        .WithMany("WarehouseStockStorageMovements")
                        .HasForeignKey("FkStockStorageId")
                        .HasConstraintName("FK_WarehouseStockStorageWarehouseStockStorageMovement");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WarehouseStockStorages", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.Warehouses", "FkWarehouse")
                        .WithMany("WarehouseStockStorages")
                        .HasForeignKey("FkWarehouseId")
                        .HasConstraintName("FK_WarehouseWarehouseStockStorage");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentBoxDetail", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.WmsDocumentBoxes", "FkWmsDocumentBox")
                        .WithMany("WmsDocumentBoxDetail")
                        .HasForeignKey("FkWmsDocumentBoxId")
                        .HasConstraintName("FK_wmsDocumentBoxDetail_wmsDocumentBoxes");

                    b.HasOne("Amtrack.Data_V2.Data.WmsDocumentBoxDetail", "FkWmsDocumentBoxMasterDetail")
                        .WithMany("InverseFkWmsDocumentBoxMasterDetail")
                        .HasForeignKey("FkWmsDocumentBoxMasterDetailId")
                        .HasConstraintName("FK_wmsDocumentBoxDetail_wmsDocumentBoxDetail");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentBoxes", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.WmsDocumentBoxes", "FkWmsDocumentBoxMaster")
                        .WithMany("InverseFkWmsDocumentBoxMaster")
                        .HasForeignKey("FkWmsDocumentBoxMasterId")
                        .HasConstraintName("FK_wmsDocumentBoxes_wmsDocumentBoxes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentBoxInfo", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.WmsDocumentBoxes", "FkWmsDocumentBox")
                        .WithMany("WmsDocumentBoxInfo")
                        .HasForeignKey("FkWmsDocumentBoxId")
                        .HasConstraintName("FK_wmsDocumentBoxInfo_wmsDocumentBoxes");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentBoxLinks", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.WmsDocumentBoxes", "FkWmsDocumentBox")
                        .WithMany("WmsDocumentBoxLinks")
                        .HasForeignKey("FkWmsDocumentBoxId")
                        .HasConstraintName("FK_wmsDocumentBoxLinks_wmsDocumentBoxes");

                    b.HasOne("Amtrack.Data_V2.Data.WmsDocuments", "FkWmsDocument")
                        .WithMany("WmsDocumentBoxLinks")
                        .HasForeignKey("FkWmsDocumentId")
                        .HasConstraintName("FK_wmsDocumentBoxLinks_wmsDocuments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentBoxTracking", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.WmsDocumentBoxes", "FkWmsDocumentBox")
                        .WithMany("WmsDocumentBoxTracking")
                        .HasForeignKey("FkWmsDocumentBoxId")
                        .HasConstraintName("FK_wmsDocumentBoxTracking_wmsDocumentBoxes");

                    b.HasOne("Amtrack.Data_V2.Data.WmsTracking", "FkWmsTracking")
                        .WithOne("WmsDocumentBoxTracking")
                        .HasForeignKey("Amtrack.Data_V2.Data.WmsDocumentBoxTracking", "FkWmsTrackingId")
                        .HasConstraintName("FK_wmsDocumentBoxTracking_wmsTracking");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentLines", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.WmsDocuments", "FkWmsDocument")
                        .WithMany("WmsDocumentLines")
                        .HasForeignKey("FkWmsDocumentId")
                        .HasConstraintName("FK_wmsDocumentLines_wmsDocuments");

                    b.HasOne("Amtrack.Data_V2.Data.WmsDocumentLines", "FkWmsDocumentMasterLine")
                        .WithMany("InverseFkWmsDocumentMasterLine")
                        .HasForeignKey("FkWmsDocumentMasterLineId")
                        .HasConstraintName("FK_wmsDocumentLines_wmsDocumentLines");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentLinks", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.WmsDocuments", "FkWmsDocument")
                        .WithMany("WmsDocumentLinksFkWmsDocument")
                        .HasForeignKey("FkWmsDocumentId")
                        .HasConstraintName("FK_WmsDocumentLinks_wmsDocuments1");

                    b.HasOne("Amtrack.Data_V2.Data.WmsDocuments", "FkWmsDocumentParent")
                        .WithMany("WmsDocumentLinksFkWmsDocumentParent")
                        .HasForeignKey("FkWmsDocumentParentId")
                        .HasConstraintName("FK_WmsDocumentLinks_wmsDocuments");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsDocumentTracking", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.WmsDocuments", "FkWmsDocument")
                        .WithMany("WmsDocumentTracking")
                        .HasForeignKey("FkWmsDocumentId")
                        .HasConstraintName("FK_wmsDocumentTracking_wmsDocuments");

                    b.HasOne("Amtrack.Data_V2.Data.WmsTracking", "FkWmsTracking")
                        .WithOne("WmsDocumentTracking")
                        .HasForeignKey("Amtrack.Data_V2.Data.WmsDocumentTracking", "FkWmsTrackingId")
                        .HasConstraintName("FK_wmsDocumentTracking_wmsTracking");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsStagingLocationSessionBoxes", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.WmsStagingLocationSessions", "FkWmsStagingLocationSession")
                        .WithMany("WmsStagingLocationSessionBoxes")
                        .HasForeignKey("FkWmsStagingLocationSessionId")
                        .HasConstraintName("FK_wmsStagingLocationSessionBoxes_wmsStagingLocationSessions");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsStagingLocationSessions", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.WmsStagingLocations", "FkWmsStagingLocation")
                        .WithMany("WmsStagingLocationSessions")
                        .HasForeignKey("FkWmsStagingLocationId")
                        .HasConstraintName("FK_wmsStagingLocationSessions_wmsStagingLocations");
                });

            modelBuilder.Entity("Amtrack.Data_V2.Data.WmsStagingLocationSessionTracking", b =>
                {
                    b.HasOne("Amtrack.Data_V2.Data.WmsStagingLocationSessionBoxes", "FkWmsStagingLocationSessionBox")
                        .WithMany("WmsStagingLocationSessionTracking")
                        .HasForeignKey("FkWmsStagingLocationSessionBoxId")
                        .HasConstraintName("FK_wmsStagingLocationSessionTracking_wmsStagingLocationSessionBoxes");

                    b.HasOne("Amtrack.Data_V2.Data.WmsStagingLocationSessions", "FkWmsStagingLocationSession")
                        .WithMany("WmsStagingLocationSessionTracking")
                        .HasForeignKey("FkWmsStagingLocationSessionId")
                        .HasConstraintName("FK_wmsStagingLocationSessionTracking_wmsStagingLocationSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
